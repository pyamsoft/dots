#!/bin/sh

# Migrating major version data:
# https://www.cloudytuts.com/tutorials/docker/how-to-upgrade-postgresql-in-docker-and-kubernetes

# For some reason, on a fresh first launch, the container hangs at:
#
# syncing data to disk ...
#
# Stop the container with `podman stop -t 0 postgres`
# And then start it again and it should start up

readonly _name="postgres"
readonly _image="docker.io/postgres"
readonly _tag="16.1"

# Use podman, don't use docker
if command -v podman >/dev/null; then
  _cmd="podman"
else
  _cmd="docker"
fi
readonly _cmd

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/${_name}/data"
  readonly _mount2="${HOME}/.local/etc/containers/${_name}/dumps"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/var/lib/postgresql/data"
  _mounts="${_mounts} --mount type=bind,source=${_mount2},target=/dumps"
  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # s6
  _caps="${_caps} --cap-add DAC_OVERRIDE"
  _caps="${_caps} --cap-add CHOWN"
  _caps="${_caps} --cap-add SETGID"
  _caps="${_caps} --cap-add SETUID"

  # To own /var/run/postgresql
  _caps="${_caps} --cap-add FOWNER"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  _ports="${_ports} -p 127.0.0.1:5432:5432/tcp"

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # Only for podman
  if [ "${_cmd}" = "podman" ]; then
    # Otherwise we keep OCI
    _userns="--userns keep-id"
  fi

  # On MacOS we need to own the files to chown them
  # because just VM things
  if [ "$(uname)" = "Darwin" ]; then
    _userns="${_userns} --user=$(id -u):$(id -g)"
  fi
  readonly _userns

  return 0
}

_containerize() {
  # We use our container DNS resolver
  # MacOS can't launch with host-gateway
  # On Linux we run systemd-resolved on our host machine for DNS caching
  _network="--add-host localhost:127.0.0.1 --dns-search=."
  if [ "$(uname)" = "Linux" ]; then
    # Only compare the version minors
    _current_version="$("${_cmd}" --version | awk '{ print $3 }' | tr '.' ' ' | awk '{ print $1 "." $2}')"
    _is_cmd_new_enough="$(printf -- '%s' "${_current_version}" | awk '{ if ($1 >= 4.7) print 1; else print 0 }')"
    unset _current_version

    if [ 1 -eq "${_is_cmd_new_enough}" ]; then
      _network="${_network} --add-host host.containers.internal:host-gateway"
    fi

    unset _is_cmd_new_enough
  fi
  readonly _network

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm -i -t \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    -e POSTGRES_PASSWORD=mysecretpostgrespasswd \
    ${_network} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # Wait for the ${XDG_RUNTIME_DIR}/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  if [ "$(uname)" = "Linux" ]; then
    while [ ! -d "${XDG_RUNTIME_DIR}/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
