#!/bin/sh

readonly _name="bar-assistant"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/${_name}/data"
  readonly _mount2="${HOME}/.local/etc/containers/${_name}/logs"
  readonly _mount3="${HOME}/.local/etc/containers/${_name}/meilisearch"
  readonly _mount4="${HOME}/.local/etc/containers/${_name}/nginx"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1
  mkdir -p "${_mount3}" || return 1
  mkdir -p "${_mount4}" || return 1

  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  return 0
}

_compose() {
  # Check for compose presence

  readonly _compose_file="${HOME}/.local/etc/containers/${_name}/compose.yml"
  if [ ! -e "${_compose_file}" ]; then
    printf -- 'You must provide %s\n' "${_compose_file}"
    return 1
  fi

  _project="$(dirname "${_compose_file}")"

  # Move into the compose project directory
  # We need to live here to auto-read the .env file
  cd "${_project}" || {
    printf -- 'Unable to cd into compose project directory: %s\n' "${_project}"
  }
  unset _project

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  exec ${_cmd} compose --file "${_compose_file}" up --force-recreate "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1

  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the ${XDG_RUNTIME_DIR}/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ]; then
    while [ ! -d "${XDG_RUNTIME_DIR}/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _compose "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
