#!/bin/sh

# Pick name based on environment mode
case "${DOZZLE_MODE}" in
agent)
  _name="dozzle-agent"
  ;;
hub)
  _name="dozzle-hub"
  ;;
*)
  printf -- 'You must export the Dozzle mode as "DOZZLE_MODE": "agent" "hub"\n'
  exit 1
  ;;
esac

readonly _name
readonly _image="docker.io/amir20/dozzle"
readonly _tag="v8.11.9"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  _mounts=""

  if [ "${_name}" = "dozzle-hub" ]; then
    if [ "$(id -u)" -eq 0 ]; then
      _podman_socket="/var/run/podman/podman.sock"
    else
      _podman_socket="${XDG_RUNTIME_DIR}/podman/podman.sock"
    fi
    readonly _podman_socket
    readonly _docker_socket="/var/run/docker.sock"

    if [ -S "${_podman_socket}" ]; then
      _mounts="${_mounts} --mount type=bind,source=${_podman_socket},target=/var/run/docker.sock"
    elif [ -S "${_docker_socket}" ]; then
      _mounts="${_mounts} --mount type=bind,source=${_docker_socket},target=/var/run/docker.sock"
    else
      printf -- 'Missing both podman and docket socket.\n'
      return 1
    fi
  fi

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  if [ "${_name}" = "dozzle-hub" ]; then
    _ports="${_ports} -p 127.0.0.1:8910:8080/tcp"
  fi

  readonly _ports
  return 0
}

_check_user() {
  # This can be run by either root or a normal user
  _userns=""

  readonly _userns

  return 0
}

_containerize() {
  _dz=""

  # Source the runtime config (so we don't have to hardcode keys)
  if [ "$(id -u)" -eq 0 ]; then
    _runconf="/usr/local/etc/containers/${_name}/runconfig.env"
  else
    _runconf="${HOME}/.local/etc/containers/${_name}/runconfig.env"
  fi

  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  readonly _dz

  # We use our container DNS resolver
  # MacOS can't launch with host-gateway
  # On Linux we run systemd-resolved on our host machine for DNS caching
  _network="--add-host localhost:127.0.0.1 --dns-search=."
  if [ "$(uname)" = "Linux" ]; then
    # Only compare the version minors
    _current_version="$("${_cmd}" --version | awk '{ print $3 }' | tr '.' ' ' | awk '{ print $1 "." $2}')"
    _is_cmd_new_enough="$(printf -- '%s' "${_current_version}" | awk '{ if ($1 >= 4.7) print 1; else print 0 }')"
    unset _current_version

    if [ 1 -eq "${_is_cmd_new_enough}" ]; then
      _network="${_network} --add-host host.containers.internal:host-gateway"
    fi

    unset _is_cmd_new_enough
  fi

  # Auto Update Checking support
  _auto="--label=io.containers.autoupdate=registry"
  _auto="${_auto} --label=PODMAN_SYSTEMD_UNIT=not-a-real.service"

  if [ -z "${DOZZLE_COMMAND}" ]; then
    printf -- 'You must export the Dozzle command as "DOZZLE_COMMAND"\n'
    return 1
  fi

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm -i -t \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    ${_dz} \
    ${_network} \
    ${_auto} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" ${DOZZLE_COMMAND} "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the ${XDG_RUNTIME_DIR}/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ]; then
    while [ ! -d "${XDG_RUNTIME_DIR}/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
