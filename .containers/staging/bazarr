#!/bin/sh

readonly _name="bazarr"
readonly _image="ghcr.io/linuxserver/bazarr"
readonly _tag="1.2.4"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/${_name}/config"
  readonly _mount2="${HOME}/.local/etc/containers/${_name}/media"
  readonly _mount3="${HOME}/.local/etc/containers/${_name}/media2"

  # Prep the directories
  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1
  mkdir -p "${_mount3}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/config"
  _mounts="${_mounts} --mount type=bind,source=${_mount2},target=/media"
  _mounts="${_mounts} --mount type=bind,source=${_mount3},target=/media2"
  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # Needed for s6
  _caps="${_caps} --cap-add DAC_OVERRIDE"
  _caps="${_caps} --cap-add CHOWN"
  _caps="${_caps} --cap-add SETGID"
  _caps="${_caps} --cap-add SETUID"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # Ports are not exposed in this service.
  # They should be exposed by the gluetun service.
  # _ports="${_ports} -p 127.0.0.1:6767:6767/tcp"

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # Expects to be root for s6
  _userns=""

  readonly _userns

  return 0
}

_containerize() {
  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # This container uses the gluetun VPN network stack.
  # Gluetun must be running before this container.

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run ${_how} \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --network container:gluetun \
    -e PUID=1000 \
    -e PGID=1000 \
    -e TZ="US/Pacific" \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {

  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # How do we run?
  if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
    shift
    _how="-d --restart=unless-stopped"
  else
    _how="--rm -i -t"
  fi
  readonly _how

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0

