#!/bin/sh

readonly _image="docker.io/steamcmd/steamcmd"
readonly _tag="ubuntu"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/steamcmd/${_name}/data"
  readonly _mount2="${HOME}/.local/etc/containers/steamcmd/${_name}/steam"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/data"
  _mounts="${_mounts} --mount type=bind,source=${_mount2},target=/root/Steam"
  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # s6
  _caps="${_caps} --cap-add DAC_OVERRIDE"
  _caps="${_caps} --cap-add CHOWN"
  _caps="${_caps} --cap-add SETGID"
  _caps="${_caps} --cap-add SETUID"

  # To own /var/run/postgresql
  _caps="${_caps} --cap-add FOWNER"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # SteamCMD ports
  _ports="${_ports} -p 127.0.0.1:27015:27015/udp"

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # Otherwise we keep OCI
  _userns=""

  readonly _userns

  return 0
}

_containerize() {
  _steam=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="${HOME}/.local/etc/containers/steamcmd/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf
  readonly _steam

  # We use our container DNS resolver
  # MacOS can't launch with host-gateway
  # On Linux we run systemd-resolved on our host machine for DNS caching
  _network="--add-host localhost:127.0.0.1 --dns-search=."
  if [ "$(uname)" = "Linux" ]; then
    # Only compare the version minors
    _current_version="$("${_cmd}" --version | awk '{ print $3 }' | tr '.' ' ' | awk '{ print $1 "." $2}')"
    _is_cmd_new_enough="$(printf -- '%s' "${_current_version}" | awk '{ if ($1 >= 4.7) print 1; else print 0 }')"
    unset _current_version

    if [ 1 -eq "${_is_cmd_new_enough}" ]; then
      _network="${_network} --add-host host.containers.internal:host-gateway"
    fi

    unset _is_cmd_new_enough
  fi
  readonly _network

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run ${_how} \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    ${_network} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" \
    "$@"
}

main() {
  # How do we run?
  if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
    shift
    _how="-d --restart=unless-stopped"
  else
    _how="--rm -i -t"
  fi
  readonly _how

  # Name first
  if [ -z "$1" ]; then
    printf -- 'Missing container name!\n'
    return 1
  else
    _name="$1"
    readonly _name
    shift
  fi

  # Name first
  if [ "$#" -le 0 ]; then
    printf -- 'Missing steamcmd action for %s!\n' "${_name}"
    return 1
  fi

  printf -- 'Running steamcmd: %s %s\n' "${_name}" "$*"
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
