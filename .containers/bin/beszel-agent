#!/bin/sh

readonly _basename="beszel"
readonly _name="${_basename}-agent"
readonly _image="docker.io/henrygd/beszel-agent"
readonly _tag="0.10.1"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_ssh_key() {
  _data_dir="$1"

  # Read the SSH pubkey
  if [ -e "${_data_dir}/id_ed25519.pub" ]; then
    BESZEL_KEY="$(cat "${_data_dir}/id_ed25519.pub")"
    export BESZEL_KEY
  fi

  unset _data_dir
  return 0
}

_prep_mounts() {
  # Hub and Agent share a socket
  readonly _socket="${HOME}/.local/etc/containers/${_basename}/socket"
  readonly _hub_data="${HOME}/.local/etc/containers/${_basename}-hub/data"

  # Ensure socket
  mkdir -p "${_socket}" || return 1

  # Make agent mounts
  mkdir -p "${HOME}/.local/etc/containers/${_name}" || return 1

  # Make the SSH keys
  _prep_ssh_key "${_hub_data}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_socket},target=/beszel_socket"

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # For file permissions
  #
  # Doesn't actually need these?
  # https://www.redhat.com/en/blog/secure-your-containers-one-weird-trick
  # _caps="${_caps} --cap-add DAC_OVERRIDE"
  # _caps="${_caps} --cap-add CHOWN"
  # _caps="${_caps} --cap-add SETGID"
  # _caps="${_caps} --cap-add SETUID"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # Run with root for samba binding but also keep-id for /var/cache/samba/msg.lock
  _userns="--userns keep-id"

  readonly _userns

  return 0
}

_containerize() {
  _ba=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="${HOME}/.local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'Optional runconf file supported at %s\n' "${_runconf}"
  else
    # Source the file into the environment
    # shellcheck disable=SC1090
    . "${_runconf}" || return 1
    unset _runconf
  fi
  readonly _ba

  # We use our container DNS resolver
  # MacOS can't launch with host-gateway
  # On Linux we run systemd-resolved on our host machine for DNS caching
  _network="--add-host localhost:127.0.0.1 --dns-search=."
  if [ "$(uname)" = "Linux" ]; then
    # Only compare the version minors
    _current_version="$("${_cmd}" --version | awk '{ print $3 }' | tr '.' ' ' | awk '{ print $1 "." $2}')"
    _is_cmd_new_enough="$(printf -- '%s' "${_current_version}" | awk '{ if ($1 >= 4.7) print 1; else print 0 }')"
    unset _current_version

    if [ 1 -eq "${_is_cmd_new_enough}" ]; then
      _network="${_network} --add-host host.containers.internal:host-gateway"
    fi

    unset _is_cmd_new_enough
  fi

  # Agent must run with host networking
  _network="${_network} --net=host"
  readonly _network

  if [ -z "${BESZEL_KEY}" ]; then
    printf -- 'You must export the Beszel Agent SSH Key as "BESZEL_KEY"\n'
    return 1
  fi

  # Auto Update Checking support
  _auto="--label=io.containers.autoupdate=registry"
  _auto="${_auto} --label=PODMAN_SYSTEMD_UNIT=not-a-real.service"

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm -i -t \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    -e LISTEN="/beszel_socket/beszel.sock" \
    -e KEY="${BESZEL_KEY}" \
    ${_ba} \
    ${_network} \
    ${_auto} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the ${XDG_RUNTIME_DIR}/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ]; then
    while [ ! -d "${XDG_RUNTIME_DIR}/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
