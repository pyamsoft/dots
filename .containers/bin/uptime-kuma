#!/bin/sh

readonly _name="uptime-kuma"
readonly _image="docker.io/louislam/uptime-kuma"
readonly _tag="1.23.13"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/${_name}/data"

  mkdir -p "${_mount1}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/app/data"
  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # Start as priv and then drop to lower user
  _caps="${_caps} --cap-add SETGID"
  _caps="${_caps} --cap-add SETUID"

  # Doesn't actually need these?
  # https://www.redhat.com/en/blog/secure-your-containers-one-weird-trick
  # _caps="${_caps} --cap-add DAC_OVERRIDE"
  # _caps="${_caps} --cap-add CHOWN"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # No ports, we need --net=host to watch other services on the machine

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # On MacOS we need to own the files to chown them
  # because just VM things
  _userns="--userns keep-id"
  readonly _userns

  return 0
}

_containerize() {
  # Add extra env before the set -x
  _env="-e PUID=$(id -u) -e PGID=$(id -g)"
  readonly _env

  _uk=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="${HOME}/.local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf
  readonly _uk

  # Only compare the version minors
  _current_version="$("${_cmd}" --version | awk '{ print $3 }' | tr '.' ' ' | awk '{ print $1 "." $2}')"
  _is_cmd_new_enough="$(printf -- '%s' "${_current_version}" | awk '{ if ($1 >= 4.7) print 1; else print 0 }')"
  unset _current_version

  # We use our container DNS resolver
  # MacOS can't launch with host-gateway
  _network="--add-host localhost:127.0.0.1 --dns 127.0.0.1 --dns-search=."
  if [ "$(uname)" = "Linux" ] && [ 1 -eq "${_is_cmd_new_enough}" ]; then
    _network="${_network} --add-host host.containers.internal:host-gateway"
  fi
  readonly _network

  unset _is_cmd_new_enough

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # We can use localhost DNS since we have host network access,
  # so localhost is AdguardHome

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm -i -t \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --net=host \
    ${_uk} \
    ${_network} \
    ${_env} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the ${XDG_RUNTIME_DIR}/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ]; then
    while [ ! -d "${XDG_RUNTIME_DIR}/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
