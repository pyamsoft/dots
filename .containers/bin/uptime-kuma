#!/bin/sh

readonly _name="uptime-kuma"
readonly _image="docker.io/louislam/uptime-kuma"
readonly _tag="1.23.3"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/${_name}/data"

  mkdir -p "${_mount1}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/app/data"
  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""
  _caps="${_caps} --cap-add DAC_OVERRIDE"
  _caps="${_caps} --cap-add CHOWN"
  _caps="${_caps} --cap-add SETGID"
  _caps="${_caps} --cap-add SETUID"
  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # No ports, we need --net=host to watch other services on the machine

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # On MacOS we need to own the files to chown them
  # because just VM things
  _userns="--userns keep-id"
  readonly _userns

  return 0
}

_containerize() {
  # Add extra env before the set -x
  _env="-e PUID=$(id -u) -e PGID=$(id -g)"

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run ${_how} \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --net=host \
    ${_env} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # How do we run?
  if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
    shift
    _how="-d --restart=unless-stopped"
  else
    _how="--rm -i -t"
  fi
  readonly _how

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
