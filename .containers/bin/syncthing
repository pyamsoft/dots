#!/bin/sh

if [ "$(id -u)" -eq 0 ]; then
  printf -- 'You must run this as a rootless container\n'
  exit 1
fi

# Let it daemonize
if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
  shift
  _how="-d"
else
  _how="--rm"
fi
readonly _how

readonly _name="syncthing"
readonly _image="docker.io/syncthing/syncthing"

readonly _mount1="${HOME}/.local/etc/containers/${_name}/work"

# Prep the directories
mkdir -p "${_mount1}" || exit 1

# Use docker or podman (priority podman)
_cmd="docker"
_userns=""
if command -v podman > /dev/null; then
  _cmd="podman"

  # Need this userns option that is podman specific or we have random OCI permission error
  # Can't apply on Mac because our VM runs as root for adguardhome
  if [ "$(uname)" != "Darwin" ]; then
    _userns="--userns keep-id"
  fi
fi
readonly _cmd

# On MacOS we need to own the files to chown them
# because just VM things
if [ "$(uname)" = "Darwin" ]; then
  _user="--user=$(id -u):$(id -g)"
else
  _user=""
fi

# Log the commands we use next
# Fail on errors
# Fail on unassigned
set -xeu

# systemd --user does not like the healthcheck command
# disable it.
_health=""
if [ "$(uname)" != "Darwin" ]; then
_health="--health-cmd none"
fi

# Don't quote so that if user is empty it still expands
#
# shellcheck disable=SC2086
exec ${_cmd} run ${_how} \
  --name "${_name}" --hostname "${_name}" --pull never \
  --security-opt no-new-privileges:true --cap-drop ALL \
  --mount type=bind,source="${_mount1}",target=/var/syncthing \
  -p 127.0.0.1:8384:8384/tcp \
  -p 127.0.0.1:22000:22000/tcp \
  -p 127.0.0.1:22000:22000/udp \
  -p 127.0.0.1:21027:21027/udp \
  --cap-add DAC_OVERRIDE \
  --cap-add CHOWN \
  --cap-add SETGID \
  --cap-add SETUID \
  -e STGUIADDRESS= \
  -e STNODEFAULTFOLDER=1 \
  ${_health} \
  ${_user} \
  ${_userns} \
  "${_image}" "$@"
