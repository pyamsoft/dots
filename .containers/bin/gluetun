#!/bin/sh

readonly _name="gluetun"
readonly _image="docker.io/qmcgaw/gluetun"
readonly _tag="v3.35.0"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/${_name}/data"

  # Prep the directories
  mkdir -p "${_mount1}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/gluetun"
  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  _caps="${_caps} --cap-add NET_BIND_SERVICE"
  _caps="${_caps} --cap-add NET_ADMIN"

  # For unbound
  _caps="${_caps} --cap-add CHOWN"

  # Files
  _caps="${_caps} --cap-add DAC_OVERRIDE"
  _caps="${_caps} --cap-add SETGID"
  _caps="${_caps} --cap-add SETUID"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # Expose healthcheck port
  _ports="${_ports} -p 127.0.0.1:9999:9999/tcp"

  # Bazarr
  _ports="${_ports} -p 127.0.0.1:6767:6767/tcp"

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # Expects to be root (since the cert file is owned by root)
  _userns="--user 0:0"

  readonly _userns

  return 0
}

_check_health() {
  _health=""

  # systemd does not like spawning this healthcheck
  if [ "$(uname)" != "Darwin" ]; then
    _health="--health-cmd none"
  fi

  readonly _health

  return 0
}

_containerize() {
  # Gluetun runtime config variable
  _gt=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="${HOME}/.local/etc/containers/gluetun/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run ${_how} \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --device=/dev/net/tun:/dev/net/tun \
    -e VPN_SERVICE_PROVIDER="mullvad" \
    -e VPN_TYPE="wireguard" \
    -e COUNTRY="JAPAN" \
    ${_gt} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    ${_health} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _check_health || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # How do we run?
  if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
    shift
    _how="-d --restart=unless-stopped"
  else
    _how="--rm -i -t"
  fi
  readonly _how

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
