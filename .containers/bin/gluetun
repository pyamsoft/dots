#!/bin/sh

readonly _name="gluetun"
readonly _image="docker.io/qmcgaw/gluetun"
readonly _tag="v3.40.0"

# Use podman, don't use docker
if command -v podman >/dev/null; then
  _cmd="podman"
elif command -v docker >/dev/null; then
  _cmd="docker"
else
  printf -- 'Requires either "podman" or "docker" ("podman" preferred)\n'
  exit 1
fi
readonly _cmd

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/${_name}/data"

  # Prep the directories
  mkdir -p "${_mount1}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/gluetun"
  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # Gluetun
  _caps="${_caps} --cap-add NET_ADMIN"

  # File writing for /tmp/gluetun/ip during setup
  _caps="${_caps} --cap-add CHOWN"

  # DNS binding permission (for running local unbound server)
  _caps="${_caps} --cap-add NET_BIND_SERVICE"

  # Make DNS work inside container
  # Allow healthcheck on startup to succeed
  _caps="${_caps} --cap-add DAC_OVERRIDE"
  _caps="${_caps} --cap-add SETGID"
  _caps="${_caps} --cap-add SETUID"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # Control
  _ports="${_ports} -p 127.0.0.1:9998:8000/tcp"

  # Health check
  _ports="${_ports} -p 127.0.0.1:9999:9999/tcp"

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # Expects to be root (since the cert file is owned by root)
  _userns="--user 0:0"
  readonly _userns

  return 0
}

_containerize() {
  # Gluetun runtime config variable
  _gt=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="${HOME}/.local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # Executing from systemd, one or both of these are set, otherwise, we are CLI
  # INVOCATION_ID is set for shells using run0, so we don't want to track on that
  # Just expect JOURNAL_STREAM for services connected to journald
  if [ "$(uname)" = "Linux" ] && [ -n "${JOURNAL_STREAM}" ]; then
    if [ "${_cmd}" = "podman" ]; then
      _gt="${_gt} --log-driver json-file"
    fi
  else
    _gt="${_gt} -i -t"
  fi
  readonly _gt

  # Gluetun internally runs its own DNS stack. Do NOT specify --dns here
  _network="${_network} --add-host localhost:127.0.0.1 --dns-search=."
  readonly _network

  # Auto Update Checking support
  _auto="--label=io.containers.autoupdate=registry"
  _auto="${_auto} --label=PODMAN_SYSTEMD_UNIT=not-a-real.service"
  readonly _auto

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --device=/dev/net/tun:/dev/net/tun \
    -e VPN_SERVICE_PROVIDER="mullvad" \
    -e VPN_TYPE="wireguard" \
    ${_gt} \
    ${_network} \
    ${_auto} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the ${XDG_RUNTIME_DIR}/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ] && [ "${_cmd}" = "podman" ]; then
    while [ ! -d "${XDG_RUNTIME_DIR}/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
