#!/bin/sh

readonly _name="samba"
readonly _image="docker.io/crazymax/samba"
readonly _tag="4.18.9"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/${_name}/data"
  readonly _mount2="${HOME}/.local/etc/containers/${_name}/config"
  readonly _mount3="${HOME}/.local/etc/containers/${_name}/shares"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1
  mkdir -p "${_mount3}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/data"
  _mounts="${_mounts} --mount type=bind,source=${_mount3},target=/samba"

  # Mount config if possible
  if [ -f "${_mount2}/config.yml" ]; then
    _mounts="${_mounts} --mount type=bind,source=${_mount2}/config.yml,target=/data/config.yml"
  fi

  # Mount password files if possible
  for f in "${_mount2}/passwd".*; do
    case "$f" in
      *\**)
        # No password files
        ;;
      *)
        _f_name="$(basename "$f")"
        _mounts="${_mounts} --mount type=bind,source=${f},target=/run/secrets/${_f_name}"
        unset _f_name
        unset _f
        ;;
    esac
  done
  unset _f_name
  unset _f

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # For file permissions
  _caps="${_caps} --cap-add DAC_OVERRIDE"
  _caps="${_caps} --cap-add CHOWN"
  _caps="${_caps} --cap-add SETGID"
  _caps="${_caps} --cap-add SETUID"

  # Server runs on port 137-139 and 445
  _caps="${_caps} --cap-add NET_BIND_SERVICE"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # More ports in runconfig.env
  _ports="${_ports} -p 127.0.0.1:1445:445/tcp"

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # Run with root for samba binding but also keep-id for /var/cache/samba/msg.lock
  _userns="--user=0:0 --userns keep-id"

  readonly _userns

  return 0
}

_containerize() {
  # Samba runtime config variable
  _smb=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="${HOME}/.local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run ${_how} \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --add-host "localhost:127.0.0.1" \
    --dns "1.1.1.1" \
    --init \
    ${_smb} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # How do we run?
  if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
    shift
    _how="-d --restart=unless-stopped"
  else
    _how="--rm -i -t"
  fi
  readonly _how

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0

