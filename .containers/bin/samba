#!/bin/sh

readonly _name="samba"
readonly _image="docker.io/crazymax/samba"
readonly _tag="4.19.9"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/${_name}/data"
  readonly _mount2="${HOME}/.local/etc/containers/${_name}/config"
  readonly _mount3="${HOME}/.local/etc/containers/${_name}/shares"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1
  mkdir -p "${_mount3}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/data"
  _mounts="${_mounts} --mount type=bind,source=${_mount3},target=/samba"

  # Mount config if possible
  if [ -f "${_mount2}/config.yml" ]; then
    _mounts="${_mounts} --mount type=bind,source=${_mount2}/config.yml,target=/data/config.yml"
  fi

  # Mount password files if possible
  for f in "${_mount2}/passwd".*; do
    case "$f" in
    *\**)
      # No password files
      ;;
    *)
      _f_name="$(basename "$f")"
      _mounts="${_mounts} --mount type=bind,source=${f},target=/run/secrets/${_f_name}"
      unset _f_name
      unset _f
      ;;
    esac
  done
  unset _f_name
  unset _f

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # s6-init uses chown and drops privilege
  _caps="${_caps} --cap-add CHOWN"
  _caps="${_caps} --cap-add SETGID"
  _caps="${_caps} --cap-add SETUID"

  # Needed right after startup to open samba /cron/lock
  _caps="${_caps} --cap-add DAC_OVERRIDE"

  # Server runs on port 137-139 and 445
  _caps="${_caps} --cap-add NET_BIND_SERVICE"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # More ports in runconfig.env
  _ports="${_ports} -p 127.0.0.1:1445:445/tcp"

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # Run with root for samba binding but also keep-id for /var/cache/samba/msg.lock
  _userns="--user=0:0 --userns keep-id"

  readonly _userns

  return 0
}

_containerize() {
  # Samba runtime config variable
  _smb=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="${HOME}/.local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf
  readonly _smb

  # We use our container DNS resolver
  # MacOS can't launch with host-gateway
  # On Linux we run systemd-resolved on our host machine for DNS caching
  _network="--add-host localhost:127.0.0.1 --dns-search=."
  if [ "$(uname)" = "Linux" ]; then
    # Only compare the version minors
    _current_version="$("${_cmd}" --version | awk '{ print $3 }' | tr '.' ' ' | awk '{ print $1 "." $2}')"
    _is_cmd_new_enough="$(printf -- '%s' "${_current_version}" | awk '{ if ($1 >= 4.7) print 1; else print 0 }')"
    unset _current_version

    if [ 1 -eq "${_is_cmd_new_enough}" ]; then
      _network="${_network} --add-host host.containers.internal:host-gateway"
    fi

    unset _is_cmd_new_enough
  fi
  readonly _network

  # Auto Update Checking support
  _auto="--label=io.containers.autoupdate=registry"
  _auto="${_auto} --label=PODMAN_SYSTEMD_UNIT=not-a-real.service"

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm -i -t \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --init \
    ${_smb} \
    ${_network} \
    ${_auto} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the ${XDG_RUNTIME_DIR}/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ]; then
    while [ ! -d "${XDG_RUNTIME_DIR}/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
