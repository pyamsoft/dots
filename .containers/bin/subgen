#!/bin/sh

readonly _name="subgen"
readonly _image="docker.io/mccloud/subgen"
readonly _tag="latest"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/${_name}/data"
  readonly _mount2="${HOME}/.local/etc/containers/${_name}/packages"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/subgen"
  _mounts="${_mounts} --mount type=bind,source=${_mount2},target=/usr/local/lib/python3.10/dist-packages"
  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # No caps

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  _ports="${_ports} -p 127.0.0.1:8090:8090/tcp"

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # Need this userns option that is podman specific or we have random OCI permission error
  _userns="--userns keep-id"
  readonly _userns

  return 0
}

_get_gid_for_group() {
  _grp="$1"
  _gid="$(getent group "${_grp}" | cut -d : -f 3)"

  printf -- '%s' "${_gid}"

  unset _grp
  unset _gid
  return 0
}

_containerize() {
  # Needed for GPU rendering
  _groups=""
  _groups="${_groups} --group-add=$(_get_gid_for_group "render")"
  _groups="${_groups} --group-add=$(_get_gid_for_group "video")"
  readonly _groups

  _sg=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="${HOME}/.local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Name the sublang AA so we don't replace eng and
  # it appears at the top of the list

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run ${_how} \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --device /dev/dri:/dev/dri \
    -e WHISPER_MODEL="medium" \
    -e WHISPER_THREADS="4" \
    -e PROCADDEDMEDIA="True" \
    -e PROCMEDIAONPLAY="True" \
    -e NAMESUBLANG="aa" \
    -e SKIPIFINTERNALSUBLANG="eng" \
    -e WEBHOOKPORT="8090" \
    -e CONCURRENT_TRANSCRIPTIONS="2" \
    -e WORD_LEVEL_HIGHLIGHT="False" \
    -e DEBUG="False" \
    -e TRANSCRIBE_DEVICE="cpu" \
    -e MODEL_PATH="." \
    ${_sg} \
    ${_groups} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # How do we run?
  if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
    shift
    _how="-d --restart=unless-stopped"
  else
    _how="--rm -i -t"
  fi
  readonly _how

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0

