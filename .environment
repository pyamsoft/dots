# shellcheck shell=bash

__setup_editor()
{
  # Setup system editors
  export EDITOR=vim
  export SYSTEMD_EDITOR=vim
  export SUDO_EDITOR=vim
}

__setup_c_compiler()
{
  # System C compilers
  export CC=gcc
  export CXX=g++
}

__setup_locale()
{
  # Incase LANG is not defined since Java and other tools nolikey POSIX
  # May be UserLand related on Android
  export LANG="en_US.UTF-8"
  export LANGUAGE="en_US.UTF-8"
  export LC_CTYPE="en_US.UTF-8"
  export LC_NUMERIC="en_US.UTF-8"
  export LC_TIME="en_US.UTF-8"
  export LC_COLLATE="en_US.UTF-8"
  export LC_MONETARY="en_US.UTF-8"
  export LC_MESSAGES="en_US.UTF-8"
  export LC_PAPER="en_US.UTF-8"
  export LC_NAME="en_US.UTF-8"
  export LC_ADDRESS="en_US.UTF-8"
  export LC_TELEPHONE="en_US.UTF-8"
  export LC_MEASUREMENT="en_US.UTF-8"
  export LC_IDENTIFICATION="en_US.UTF-8"
}

__setup_path()
{
  # Keep the original PATH before we toutch it
  export SYSTEM_DEFAULT_PATH="${PATH}"

  # Git tracked scripts
  if [ -d "${HOME}/bin" ]; then
    PATH="${HOME}/bin:${PATH}"
  fi

  # Local scripts that are not git tracked
  if [ -d "${HOME}/.local/bin" ]; then
    PATH="${HOME}/.local/bin:${PATH}"
  fi

  # bubblewrap-wrap scripts
  if command -v bww > /dev/null; then
    if [ -d "${HOME}/.bww/bin" ]; then
      PATH="${HOME}/.bww/bin:${PATH}"
    fi
  fi

  # Flatpak scrips
  if command -v flatpak > /dev/null; then
    if [ -d "${HOME}/.flatpak/bin" ]; then
      PATH="${HOME}/.flatpak/bin:${PATH}"
    fi
  fi

  # Docker scrips
  if command -v docker > /dev/null; then
    if [ -d "${HOME}/.docker/bin" ]; then
      PATH="${HOME}/.docker/bin:${PATH}"
    fi
  fi

  # Add local npm repository: used for things like bash-language-server
  # Set the local npm global path with "npm config set prefix ~/.npm/global"
  if command -v npm > /dev/null; then
    PATH="$(npm config get prefix)/bin:${PATH}"
  fi

  # Export the PATH
  export PATH
}

__setup_xdg()
{
  # Define XDG directories
  export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"
  export XDG_CACHE_HOME="${XDG_CACHE_HOME:-${HOME}/.cache}"
  export XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
  export XDG_STATE_HOME="${XDG_STATE_HOME:-${HOME}/.local/state}"
}

__setup_wine()
{
  # Wine with esync
  # https://github.com/zfigura/wine/blob/esync/README.esync
  export WINEDEBUG=-all
  export WINEESYNC=1
}

__setup_homedir()
{
  # Suggestions from xdg-ninja
  export INPUTRC="${XDG_CONFIG_HOME}/readline/inputrc"
  export ICEAUTHORITY="${XDG_CACHE_HOME}/ICEauthority"
  export LESSHISTFILE="${XDG_CACHE_HOME}/less/history"
  export GNUPGHOME="${XDG_DATA_HOME}/gnupg"
}

__environment()
{
  # If we have already been sourced, exit out
  if [ -n "${PYAMSOFT_ENVIRONMENT}" ]; then
    return 0
  fi

  __setup_path
  __setup_editor
  __setup_c_compiler
  __setup_locale
  __setup_xdg
  __setup_wine
  __setup_homedir

  # Mark environment as set up
  export PYAMSOFT_ENVIRONMENT=1
}

__environment

unset -f __environment
unset -f __setup_wine
unset -f __setup_xdg
unset -f __setup_path
unset -f __setup_locale
unset -f __setup_c_compiler
unset -f __setup_editor
unset -f __setup_homedir

# vim: set syntax=sh tabstop=2 softtabstop=2 shiftwidth=2 shiftround expandtab:
