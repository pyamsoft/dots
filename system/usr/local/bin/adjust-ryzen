#!/bin/sh

# Needed for C6 disable
readonly zenstates='/usr/local/src/Zenstates-Linux'
readonly url='https://github.com/irusanov/ZenStates-Linux'
readonly script="${zenstates}/zenstates.py"
readonly command="${script} --no-gui"

readonly voltage_undervolt="64" # 1150mV
readonly voltage_original="50"  # 1238mV

check_zenstates()
{
  if [ ! -e "${zenstates}" ] || [ ! -d "${zenstates}" ]; then
    git clone "${url}" "${zenstates}" || {
      printf -- 'Failed to clone "%s" into "%s"\n' "${url}" "${zenstates}"
      printf -- 'Please re-run the script.\n'
      return 1
    }

		cd "${zenstates}" || return 1
		cd ..
  else
    if [ ! -e "${script}" ] || [ ! -x "${script}" ]; then
      printf -- 'Zenstates script could not be found at %s\n' "${script}"
      printf -- 'Please re-clone the repository.\n'
      return 1
    fi
  fi

  return 0
}

require()
{
  if ! command -v "$1" > /dev/null; then
    printf -- 'You must install "%s"\n' "$1"
    return 1
  fi

  return 0
}

require_root()
{
  if [ "$(id -u)" -ne 0 ]; then
    printf -- 'You must be root.\n'
    return 1
  fi

  return 0
}

prepare_system()
{
  modprobe -i msr || {
    printf -- 'Failed to load "msr" module\n'
    return 1
  }

  echo "on" > /sys/module/msr/parameters/allow_writes || {
    printf -- 'Failed to configure "msr" module to allow writes\n'
    return 1
  }

  return 0
}

disable_c6() {
  printf -- 'Disable C6 to prevent system hangs...\n'

  # shellcheck disable=SC2086
  ${command} --c6-disable > /dev/null || return 1

  return 0
}

main()
{
  cmd="$1"
  option="$2"

  dry=""
  if [ "${option}" = "--dry" ]; then
    dry="-t"
  else
    dry=""
  fi

  # Pre-req user
  require_root || return 1

  # Pre-req software
  require 'git' || return 1
  require 'python3' || return 1
  require 'amdctl' || return 1

  # Pre-req script location
  check_zenstates || return 1

  # Prepare system for MSR writing
  prepare_system || return 1

  # Run the script and disable c6
  disable_c6 || return 1

  if [ "${cmd}" = "list" ]; then
    exec amdctl -g || return 1
  elif [ "${cmd}" = "enable" ]; then
    # Apply p-state undervolt
    amdctl "${dry}" -p 0 -v "${voltage_undervolt}" > /dev/null || return 1
    printf -- 'Undervolted to VID: %s\n' "${voltage_undervolt}"
  elif [ "${cmd}" = "disable" ]; then
    # Restore default p-state
    amdctl "${dry}" -p 0 -v "${voltage_original}" > /dev/null || return 1
    printf -- 'Restored original voltage at VID: %s\n' "${voltage_original}"
  else
    printf -- '\n'
    printf -- 'Call with "list" "enable" "disable"\n'
    printf -- '    Can optionall pass option --dry for a dry-run.\n'
    return 1
  fi
}

main "$@" || exit 1
exit 0
