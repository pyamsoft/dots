#!/bin/sh

_root="/usr/local/etc/docker"
_app="${_root}/adguardhome"

_work="${_app}/work"
_conf="${_app}/conf"

##
# Make directories
#
prepare_dirs()
{
  mkdir -p "${_work}" || return 1
  mkdir -p "${_conf}" || return 2
  return 0
}

##
# Setup container networking
#
prepare_container()
{
  # If we are running on MacOS, this sysctl won't work
  if command -v uname > /dev/null; then
    if [ "$(uname)" != "Darwin" ]; then
      if command -v sysctl > /dev/null; then
        # Enable IP forwarding for container bridge networking
        sysctl -w net.ipv4.ip_forward=1 || return 1
      fi
    fi
  fi
}

main()
{
  # We don't need to check for root as the command will fail
  # if a user lacks privs either during directory prep
  # or when running docker.
  #
  # We don't need to be root per se, just have perm and docker access.

  prepare_dirs || {
    printf -- 'Could not setup docker directories.\n'
    return 1
  }

  prepare_container || {
    printf -- 'Could not setup docker container.\n'
    return 1
  }

  # https://hub.docker.com/r/adguard/adguardhome
  #
  # Restart the container always unless explicitly stopped (so we can view logs if it crashes)
  # Run with a tiny init system
  # No new privileges
  # Drop all caps
  # Give adguard cap NET_BIND_SERVICE so it can own port 53 and 81
  # Give adguard NET_ADMIN (or it cannot resolve network requests)
  # Bind work and conf directories
  #
  # Always bind port 53 for DNS queries - only respond to requests from localhost
  # Bind port 81 for admin console (set to 81 in the first-time-setup)
  # Bind port 3000 for first-time-setup
  # Run as daemon

  if [ "$1" = "setup" ];then
    # Eat argument
    shift

    exec docker run \
      --name adguardhome \
      --init \
      --security-opt no-new-privileges \
      --cap-drop ALL \
      --cap-add NET_BIND_SERVICE \
      --cap-add NET_ADMIN \
      -v "${_work}":/opt/adguardhome/work \
      -v "${_conf}":/opt/adguardhome/conf \
      -p 127.0.0.1:53:53/tcp \
      -p 127.0.0.1:53:53/udp \
      -p 127.0.0.1:81:81/tcp \
      -p 127.0.0.1:3000:3000/tcp \
      --rm \
      adguard/adguardhome "$@"
  elif [ "$1" = "systemd" ]; then
    # Eat argument
    shift

    exec docker run \
      --name adguardhome \
      --init \
      --security-opt no-new-privileges \
      --cap-drop ALL \
      --cap-add NET_BIND_SERVICE \
      --cap-add NET_ADMIN \
      -v "${_work}":/opt/adguardhome/work \
      -v "${_conf}":/opt/adguardhome/conf \
      -p 127.0.0.1:53:53/tcp \
      -p 127.0.0.1:53:53/udp \
      -p 127.0.0.1:81:81/tcp \
      --rm \
      adguard/adguardhome "$@"
  else
    exec docker run \
      --name adguardhome \
      --restart unless-stopped \
      --init \
      --security-opt no-new-privileges \
      --cap-drop ALL \
      --cap-add NET_BIND_SERVICE \
      --cap-add NET_ADMIN \
      -v "${_work}":/opt/adguardhome/work \
      -v "${_conf}":/opt/adguardhome/conf \
      -p 127.0.0.1:53:53/tcp \
      -p 127.0.0.1:53:53/udp \
      -p 127.0.0.1:81:81/tcp \
      -d \
      adguard/adguardhome "$@"
   fi
}

main "$@" || exit 1
exit 0
