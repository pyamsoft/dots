#!/bin/sh

readonly IGNORE=".git .gitignore .stfolder .stignore"
__pids=""

##
# $1 host path
# $2 destination path
# $3 dry run
runsync () {
  if [ "$3" = "-f" ]; then
    exec sshpass -e rsync -a "$1" "$2"
  else
    exec sshpass -e rsync -an "$1" "$2"
  fi
}

##
# $1 host path
# $2 destination path
# $3 dry run
divein () {

  for folder in "$1"/*/; do
    base_folder="$(basename "${folder}")"

    # If there are no more folders
    if [ "${base_folder}" = '*' ]; then
      break
    fi

    folder="$(printf -- '%s' "${folder}" | sed 's|//|/|g')"
    skip=0

    # Make sure this is a real folder
    for ignore in ${IGNORE}; do
      if [ "${base_folder}" = "${ignore}" ]; then
        skip=1
        break
      fi
    done

    if [ "${skip}" -eq 1 ]; then
      continue
    fi

      printf -- 'Sync: "%s" -> "%s"\n' "${folder}" "$2"
      runsync "${folder}" "$2" "$3" &
      if [ -z "${__pids}" ]; then
        __pids="$!"
      else
        __pids="$! ${__pids}"
      fi

      # Wait or else we overflow
      sleep 1
  done

  return 0
}

##
# Kills all processes in the pid list
cancel () {
  for pid in ${__pids}; do
    kill "${pid}" > /dev/null 2>&1
  done

  # If we passed it an exit code
  if [ "$#" -lt 1 ] || [ -z "$1" ]; then
    exit 1
  else
    exit "$1"
  fi
}

##
# $1 host path
# $2 destination path
# $3 dry run
main () {
  if [ -z "$1" ]; then
    printf -- 'Missing source path\n'
    return 1
  fi

  if [ -z "$2" ]; then
    printf -- 'Missing destination path\n'
    return 1
  fi

  if [ -z "${SSHPASS}" ]; then
    printf -- 'Missing SSHPASS environment variable\n'
    return 1
  fi

  if [ -z "$3" ]; then
    main_dry=""
  else
    main_dry="$3"
  fi

  trap cancel INT TERM

  divein "$1" "$2" "${main_dry}" || return 1

  # We don't quote here so the pids list expands
  # shellcheck disable=SC2086
  wait ${__pids}

  return 0
}

main "$@" || exit 1
cancel 0
