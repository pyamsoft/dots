#!/bin/sh

_stale_unlink() {
  rm -f "$1" || {
    printf -- '[ERROR] Failed removing dangling file: %s\n' "$1"
    return 1
  }

  return 0
}

_remove_holdovers() {
  printf -- '[LOG] We remove old device symlinks and logs.\n'
  printf -- '[LOG] Sunshine sometimes has a problem cleaning these up and refuses to start...\n\n'

  # Bad symlinks
  _stale_unlink "${HOME}/.config/sunshine/sunshine_keyboard" || return 1
  _stale_unlink "${HOME}/.config/sunshine/sunshine_mouse" || return 1
  _stale_unlink "${HOME}/.config/sunshine/sunshine_touchscreen" || return 1

  # Logs
  _stale_unlink "${HOME}/.config/sunshine/sunshine.log" || return 1

  return 0
}

_unlock_linux() {
  _s="$1"

  loginctl unlock-session "${_s}" || {
    printf -- '[ERROR] Failed unlocking session: %s (%s)\n' "${_s}" "$(id -u):$(id -un)"
    return 1
  }

  printf -- '[LOG] Unlocked user session %s (%s)\n' "${_s}" "$(id -u):$(id -un)"
  unset _s
  return 0
}

_unlock_macos() {
  _s="$1"

  # How do we unlock MacOS? Do we need to?
  if command -v unlocker>/dev/null 2>&1; then
    unlocker unlock || {
      printf -- '[ERROR] Failed unlocking session: %s (%s)\n' "${_s}" "$(id -u):$(id -un)"
      return 1
    }

    printf -- '[LOG] Unlocked user session %s (%s)\n' "${_s}" "$(id -u):$(id -un)"
  fi

  unset _s
  return 0
}

_unlock_session() {
  _session_to_unlock="$1"

  if [ "$(uname)" = "Darwin" ]; then
    _unlock_macos "${_session_to_unlock}" || return 1
  else
    _unlock_linux "${_session_to_unlock}" || return 1
  fi

  unset _session_to_unlock
  return 0
}

_list_sessions_linux() {
  # Get only the session ID and the user name
  # Only 'user' sessions, (instead of blank or "manager")
  # Only sessions for our active user
  # Match with spaces just in case a name is a part of another name
  loginctl list-sessions --no-legend | grep "user" | awk '{ print $1 " " $2 " " $3 }' | grep " $(id -u) $(id -un)" | awk '{ print $1 }' || return 1

  return 0
}

_list_sessions_macos() {
  # How do we list sessions on MacOS? Do we need to?
  printf -- ' ' || return 1
  return 0
}

_unlock_sessions() {
  printf -- '[LOG] We unlock all user-sessions\n'
  printf -- '[LOG] Sunshine will not be able to claim the CPU and GPU for rendering otherwise.\n\n'

  if [ "$(uname)" = "Darwin" ]; then
    _user_sessions="$(_list_sessions_macos)"
  else
    _user_sessions="$(_list_sessions_linux)"
  fi

  for _session_num in ${_user_sessions}; do
    _unlock_session "${_session_num}" || return 1
    unset _session_num
  done

  unset _user_sessions
  return 0
}

_stop_sunshine_linux() {
  systemctl --user stop sunshine >/dev/null 2>&1 || return 1
  return 0
}

_start_sunshine_linux() {
  systemctl --user restart sunshine >/dev/null 2>&1 || return 1
  return 0
}

_stop_sunshine_macos() {
  # Use the beta branch for now on MacOS
  brew services stop sunshine-beta >/dev/null 2>&1 || return 1
  return 0
}

_start_sunshine_macos() {
  # Use the beta branch for now on MacOS
  brew services restart sunshine-beta >/dev/null 2>&1 || return 1
  return 0
}

_stop_sunshine() {
  if [ "$(uname)" = "Darwin" ]; then
    _stop_sunshine_macos || return 1
  else
    _stop_sunshine_linux || return 1
  fi

  return 0
}

_start_sunshine() {
  if [ "$(uname)" = "Darwin" ]; then
    _start_sunshine_macos || return 1
  else
    _start_sunshine_linux || return 1
  fi

  return 0
}

_restart() {
  printf -- '[LOG] Stopping old sunshine service...\n\n'

  _stop_sunshine || return 1

  # Kill any potentially bad symlinks
  _remove_holdovers || return 1

  # Unlock all sessions (if a session is locked, it causes sunshine to be unable to claim the display and GPU/CPU)
  _unlock_sessions || return 1

  printf -- '[LOG] Starting new sunshine service...\n\n'

  _start_sunshine || return 1

  return 0
}

_restart_sunshine() {
  printf -- '[LOG] Restarting Sunshine gamestream...\n'

  # If we can, we should poke the monitor first just to be safe
  if command -v poke-monitor >/dev/null 2>&1; then
    printf -- '[LOG] Poking the monitor first before doing Sunshine things, just in case...\n'

    # Just give it our best shot.
    poke-monitor auto || {
      printf -- '[WARN] Poking the monitor failed, continue with Sunshine things anyway.\n'
    }
  fi

  if _restart; then
    printf -- '[LOG] Restarted sunshine service!\n'
  else
    printf -- '[ERROR] Failed to restart sunshine\n'
    return 1
  fi

  return 0
}

main() {
  if command -v sunshine >/dev/null 2>&1; then
    _restart_sunshine || return 1
    return 0
  else
    # On MacOS sometimes we are not on the PATH
    if [ "$(uname)" = "Darwin" ]; then
      # Use the beta branch for now on MacOS
      if [ -e /opt/homebrew/bin/sunshine-beta ]; then
        _restart_sunshine || return 1
        return 0
      fi
    fi

    printf -- '[ERROR] sunshine is not installed.\n'
    exit 1
  fi
}

main "$@" || exit 1
exit 0
