#!/bin/sh

# Runs flatpak with the given data prepended to an existing ENV var

##
# Attempt to source the existing env var if it exists
__source_existing_env() {
  __src_flatpak="$1"
  __src_env_var="$2"

  printf -- '%s\n' "$(flatpak info -m "${__src_flatpak}" | grep "^${__src_env_var}=" | tr '=' ' ' | awk '{ print $2 }')"

  unset __src_flatpak
  unset __src_env_var

  return 0
}

_pass_through_proxy_env() {
  if [ -n "${http_proxy}" ]; then
    __fp_env="${__fp_env} --env=http_proxy=${http_proxy}"
  fi

  if [ -n "${https_proxy}" ]; then
    __fp_env="${__fp_env} --env=https_proxy=${https_proxy}"
  fi

  if [ -n "${no_proxy}" ]; then
    __fp_env="${__fp_env} --env=no_proxy=${no_proxy}"
  fi

  if [ -n "${HTTP_PROXY}" ]; then
    __fp_env="${__fp_env} --env=HTTP_PROXY=${HTTP_PROXY}"
  fi

  if [ -n "${HTTPS_PROXY}" ]; then
    __fp_env="${__fp_env} --env=HTTPS_PROXY=${HTTPS_PROXY}"
  fi

  if [ -n "${NO_PROXY}" ]; then
    __fp_env="${__fp_env} --env=NO_PROXY=${NO_PROXY}"
  fi
}

##
# Compile environment
__compile_env() {
  __compile_env_flatpak="$1"
  __compile_env_var="$2"
  __compile_env_arg="$3"
  __compile_env_default="$4"

  if [ -z "${__compile_env_var}" ]; then
    printf -- 'Missing [%s] env var\n' "${__compile_env_flatpak}" 1>&2

    unset __compile_env_flatpak
    unset __compile_env_var
    unset __compile_env_arg
    unset __compile_env_default
    return 1
  fi

  if [ -z "${__compile_env_arg}" ]; then
    printf -- 'Missing [%s] "%s" env argument\n' "${__compile_env_flatpak}" "${__compile_env_var}" 1>&2

    unset __compile_env_flatpak
    unset __compile_env_var
    unset __compile_env_arg
    unset __compile_env_default
    return 1
  fi

  # Parse the environment, falling back to defined defaults
  __existing_env="$(__source_existing_env "${__compile_env_flatpak}" "${__compile_env_var}")"
  if [ -z "${__existing_env}" ]; then
    __new_env="${__compile_env_arg}${__compile_env_default}"
  else
    __new_env="${__compile_env_arg}${__existing_env}"
  fi

  printf -- '--env=%s=%s\n' "${__compile_env_var}" "${__new_env}"

  unset __compile_env_default
  unset __existing_env
  unset __new_env
  unset __compile_env_flatpak
  unset __compile_env_var
  unset __compile_env_arg
  unset __compile_env_default

  return 0
}

##
# Main
main() {
  if ! command -v flatpak >/dev/null; then
    printf -- 'You must install "flatpak"\n'
    return 1
  fi

  __run_shell=0
  if [ "$1" = "--shell" ]; then
    __run_shell=1
    shift
  fi

  __flatpak="$1"
  shift

  if [ -z "${__flatpak}" ]; then
    printf -- 'Missing target flatpak\n'

    unset __run_shell
    unset __flatpak
    return 1
  fi

  __fp_env=""
  while [ -n "$1" ]; do
    if [ "$1" = "--with-env" ]; then
      # This is an env command
      shift

      # Compile the environment
      __fp_env="${__fp_env} $(__compile_env "${__flatpak}" "$1" "$2" "$3")"

      # Eat the arguments
      shift
      shift
      shift
    else
      __fp_env="${__fp_env} $1"

      # Eat argument
      shift
    fi
  done

  # Capture proxy environment
  _pass_through_proxy_env

  # Run the flatpak or a shell in the flatpak (use /bin/sh, if you need bash, run it in shell)
  if [ "${__run_shell}" -eq 1 ]; then
    __fp_env="${__fp_env} --command=/bin/sh"
  fi

  if [ -z "${__fp_env}" ]; then
    printf -- 'Running flatpak [%s]\n' "${__flatpak}"
  else
    printf -- 'Running flatpak [%s] with "%s"\n' "${__flatpak}" "${__fp_env}"
  fi


  # shellcheck disable=SC2086
  exec flatpak run ${__fp_env} "${__flatpak}" || return 1

  unset __run_shell
  unset __flatpak
  unset __fp_env
  return 0
}

main "$@" || exit 1
exit 0
