#!/bin/sh

_get_latest_tags() {
  _container="$1"

  if [ -z "${_container}" ]; then
    printf -- 'Missing required container name\n'
    unset _container
    return 1
  fi

  printf -- '\nContainer: %s\n' "${_container}"
  # Trim off the json, just get the list of tags
  # Remove anything like latest, beta, other unstable versions
  # Sort by reverse version order (newest version on top)
  # max 10

  skopeo list-tags "docker://${_container}" | tail -n +4 | head -n -2 | grep -v 'unstable' | grep -v 'beta' | grep -v 'staging' | grep -v 'nightly' | grep -v 'edge' | grep -v 'dev' | grep -v 'rc' | grep -v 'version' | grep -v 'arm64' | grep -v 'preview' | grep -v 'arm' | grep -v 'amd' |
    case "${_container}" in
    */littlelink-server)
      # Don't remove latest from littlelink, it only publishes latest
      cat
      ;;
    *)
      # Otherwise remove latest and let's keep going
      grep -v 'latest' |
        case "${_container}" in
        */httpie)
          grep -v '3.5-0.9.9'
          ;;
        */jellyseerr)
          grep -v 'preview'
          ;;
        */jellyfin)
          grep -v '202.' | grep -v 'master'
          ;;
        */caddy)
          grep -v 'windows' | grep -v 'alpine' | grep -v 'builder'
          ;;
        */home-assistant)
          grep -v '.sig' | grep -v 'stable'
          ;;
        */omada-controller)
          grep -v 'chromium' | grep -v 'openj' | grep -v 'test'
          ;;
        */cloudflare-ddns)
          grep -v '.sig' | grep -v 'artifacthub'
          ;;
        */uptime-kuma)
          grep -v 'base' | grep -v 'push' | grep -v 'migrat' | grep -v 'builder' | grep -v 'alpine' | grep -v 'test' | grep -v 'debian'
          ;;
        */crowdsec)
          grep -v 'slim' | grep 'debian'
          ;;
        */scrutiny)
          grep 'omnibus'
          ;;
        */sonarr | */bazarr | */radarr | */prowlarr | */homeassistant | */qbittorrent)
          grep -v 'ls' | grep -v 'libtorrent'
          ;;
        */readarr)
          grep -v 'nightly' | grep -v 'amd64' | grep -v 'arm64'
          ;;
        */byparr)
          grep -v '.sig' | grep -v 'main'
          ;;
        *)
          cat
          ;;
        esac
      ;;
    esac | sort -r -V | head || {
    printf -- 'Failed to list most recent tags for: %s\n' "${_container}"
  }

  unset _container
  return 0
}

_check_containers() {
  _cmd="$1"

  # A string of <name> <version> <name> <version>
  # shellcheck disable=SC2086
  _containers="$(${_cmd} images | grep -e '^docker\.io' -e '^ghcr\.io' | awk '{ printf $1 " " $2 " " }')"

  while :; do
    if [ -z "${_containers}" ]; then
      break
    fi

    _name="$(printf -- '%s' "${_containers}" | awk '{ print $1 }')"
    _containers="$(printf -- '%s' "${_containers}" | cut -f 3- -d ' ')"

    # Check that we haven't already done this
    _skip=0
    for _c in ${_already_seen}; do
      if [ "${_name}" = "${_c}" ]; then
        _skip=1
        break
      fi
    done

    # Keep track
    if [ "${_skip}" -eq 0 ]; then
      _already_seen="${_already_seen} ${_name}"
      _get_latest_tags "${_name}" || return 1
    fi

    unset _name
  done

  unset _containers
  return 0
}

main() {
  if ! command -v podman >/dev/null; then
    printf -- 'Must install "podman"\n'
    return 1
  fi

  # Don't look up the same container but with different versions more than once
  # This would happen if we were running hello-world:1 and pulled down hello-world:2
  # which podman sees as 2 container images
  _already_seen=""

  # Our user
  _check_containers "podman" || return 1

  # Direct "containers" delegate
  if id -un containers >/dev/null 2>&1; then
    _check_containers "containers" || return 1
  fi

  # Any containers delegates
  for _container_delegate_user in /home/containers-*; do
    _container_delegate_user="$(basename "${_container_delegate_user}")"

    # Check the delegated command exists
    if command -v "${_container_delegate_user}" >/dev/null 2>&1; then
      _check_containers "${_container_delegate_user}" || return 1
    fi

    unset _container_delegate_user
  done
  unset _container_delegate_user

  if [ "$(uname)" != "Darwin" ]; then
    # Check again for root containers
    # We don't do this on MacOS since it runs a VM as root
    _check_containers "sudo podman" || return 1
  fi

  return 0
}

main "$@" || exit 1
exit 0
