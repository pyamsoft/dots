#!/bin/sh

# A simple jail which isolated user files from the greater HOME directory

readonly _VERSION="0.0.1"

# Can be overridden by the environment
readonly JAIL_DIR="${JAIL_DIR:-${HOME}/.local/etc/jails}"

_clean_path() {
  _current_path="${PATH}"

  # The .jails/bin dir holds alias scripts, we want to ignore
  # it when running this
  #
  # Reverse the path so we add back the paths in FIFO order
  _split_path="$(printf -- '%s' "${_current_path}" | tr ':' '\n' | tac)"
  _clean_path=""
  for _path in ${_split_path}; do
    if [ "${_path}" != "${HOME}/.jail/bin" ]; then
      if [ -z "${_clean_path}" ]; then
        _clean_path="${_path}"
      else
        _clean_path="${_path}:${_clean_path}"
      fi
    fi
  done

  PATH="${_clean_path}"
  export PATH
  return 0
}

_create_home() {
  _home="$1"
  if [ ! -d "${_home}" ]; then
    # Create the jail root
    mkdir -p "${_home}" || {
      printf -- 'Failed to create jail dir: %s\n' "${_home}"

      unset _home
      return 1
    }
  fi

  unset _home
  return 0
}

_usage() {
  printf -- '%s\n' "$(cat<<EOF
jail [${_VERSION}]

Runs a command in a jail.
A jail separates the program's \${HOME} from the real user's \$HOME
directory.

Jails are located in: ${JAIL_DIR} by default

EOF
)"
}

_run_jail() {
  _open_shell="$1"
  _cmd="$2"
  _jail="$3"

  # The rest of the arguments are commands
  shift
  shift
  shift

  # If we are opening a shell, override the command
  if [ "${_open_shell}" -eq 1 ]; then
    _cmd="/bin/bash"
  fi

  # Clean the path before running
  _clean_path || return 1

  # Log commands
  set -x

  # Make sure we kill children when bwrap dies
  # unshare namespaces [don't unshare net (internet) and don't unshare IPC (x11)]
  # dev-bind root so everything works the same as it would outside
  # tmpfs bind /tmp for security
  # mount new proc on /proc
  # Mount a new home
  # Mark the process
  exec bwrap \
    --die-with-parent \
    --unshare-user-try \
    --unshare-pid \
    --unshare-uts \
    --unshare-cgroup-try \
    --dev-bind / / \
    --tmpfs /tmp \
    --proc /proc \
    --bind "${_jail}" "${HOME}" \
    --setenv JAIL_PID "$$" \
    --setenv JAIL_PROGRAM "${_cmd}" \
    -- "${_cmd}" "$@"
}

_check_prereq() {
  if ! command -v bwrap >/dev/null; then
    printf -- 'Must have "bwrap" installed.\n'
    return 1
  fi

  if ! command -v tr >/dev/null; then
    printf -- 'Must have "tr" installed.\n'
    return 1
  fi

  if ! command -v tac >/dev/null; then
    printf -- 'Must have "tac" installed.\n'
    return 1
  fi

  if ! command -v mkdir >/dev/null; then
    printf -- 'Must have "mkdir" installed.\n'
    return 1
  fi

  return 0
}

main() {
  _check_prereq || return 1

  _cmd="$1"
  if [ -z "${_cmd}" ]; then
    printf -- 'Must provide command as first argument.\n'
    _usage
    return 1
  fi
  shift

  # If we want to open a shell, then the next thing is the command
  if [ "${_cmd}" = "--shell" ]; then
    _open_shell=1
    _cmd="$1"
    if [ -z "${_cmd}" ]; then
      printf -- 'Must provide command as first argument.\n'
      _usage
      return 1
    fi
    shift
  else
    _open_shell=0
  fi

  _jail_dir="${JAIL_DIR}/${_cmd}"
  _create_home "${_jail_dir}" || return 1
  _run_jail "${_open_shell}" "${_cmd}" "${_jail_dir}" "$@" || return 1

  unset _cmd
  unset _jail_dir
  return 0
}

main "$@" || exit 1
exit 0
