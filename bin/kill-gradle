#!/bin/sh

# Don't kill ourselves
readonly self_pid="$$"

_killa() {
  _process="$1"
  _really="$2"
  _as_root="$3"

  my_pid="$(pgrep -f "${_process}")"
  if [ -n "${my_pid}" ]; then

    clean_pids=""
    for pid in ${my_pid}; do
      if [ "${pid}" != "${self_pid}" ]; then
        clean_pids="${pid} ${clean_pids}"
      fi
    done

    if [ -n "${clean_pids}" ]; then
      if [ "${_as_root}" -eq 1 ]; then
        printf -- '[ROOT] Killing process %s\n' "${_process}" "${clean_pids}"
      else
        printf -- 'Killing process %s\n' "${_process}" "${clean_pids}"
      fi

      # Don't quote so that multiple PIDs can be killed
      if [ "${_really}" = "force" ]; then
        if [ "${_as_root}" -eq 1 ]; then
          # shellcheck disable=SC2086
          sudo kill -9 ${clean_pids} || return 1
        else
          # shellcheck disable=SC2086
          kill -9 ${clean_pids} || return 1
        fi
      else
        if [ "${_as_root}" -eq 1 ]; then
          # shellcheck disable=SC2086
          sudo kill ${clean_pids} || return 1
        else
          # shellcheck disable=SC2086
          kill ${clean_pids} || return 1
        fi
      fi
    else
      if [ "${_as_root}" -eq 1 ]; then
        printf -- '[ROOT] %s not running.\n' "${_process}"
      else
        printf -- '%s not running.\n' "${_process}"
      fi
    fi

    unset my_pid
    unset clean_pids
  else
    if [ "${_as_root}" -eq 1 ]; then
      printf -- '[ROOT] %s not running.\n' "${_process}"
    else
      printf -- '%s not running.\n' "${_process}"
    fi
  fi

  unset _process
  unset _really
  unset _as_root
  return 0
}

main() {
  _force=""
  _wait=""
  _root=0

  if [ "$1" = "--force" ]; then
    _force="force"
    shift
  fi

  if [ "$1" = "--wait" ]; then
    _wait="wait"
    shift
  fi

  if [ "$1" = "--force" ]; then
    _force="force"
    shift
  fi

  if [ "${_wait}" = "wait" ]; then
    printf -- 'Waiting before kill 3s...\n'
    sleep 3s || {
      printf -- 'Failed to wait before kill.\n'
      return 1
    }
  fi

  _root=0
  if [ "$(basename "$0")" = "kill-gradle" ]; then
    _killa "GradleDaemon" "${_force}" "${_root}" || return 1
  else
    if [ -z "${GAMER}" ]; then
      printf -- 'Running kill as root.\n'
      _root=1
    else
      _root=0
    fi

    _killa "proton" "${_force}" "${_root}" || return 1
    _killa "wineserver" "${_force}" "${_root}" || return 1
    _killa "winedevice.exe" "${_force}" "${_root}" || return 1
    _killa "explorer.exe" "${_force}" "${_root}" || return 1
    _killa "services.exe" "${_force}" "${_root}" || return 1
    _killa "gamescope" "${_force}" "${_root}" || return 1
    _killa "gamescope-brokey" "${_force}" "${_root}" || return 1
    _killa "steam-launch-wrapper" "${_force}" "${_root}" || return 1
    _killa "reaper SteamLaunch" "${_force}" "${_root}" || return 1
    _killa "srt-bwrap" "${_force}" "${_root}" || return 1
    _killa "pressure-vessel-adverb" "${_force}" "${_root}" || return 1
  fi

  # Custom kill
  if [ -n "$1" ]; then
    _killa "$*" "${_force}" "${_root}" || return 1
  fi

  unset _force
  unset _root
  unset _wait
  return 0
}

main "$@" || exit 1
exit 0
