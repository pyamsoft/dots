# shellcheck shell=bash

# Base file for pyamsoft configuration
#
# Arguments always provided as:
#
# $1 - CONFIG_DIR
# $2 - OS

# We allow scripts to call this file again and again
# But since pieces of the configuration are controlled by their own variables
# We are correctly guarded from double executes
#
# If we have already been sourced, exit out
# if [ -n "${PYAMSOFT_ENVIRONMENT}" ]; then
#   return 0
# fi

if [ -z "$1" ]; then
  # shellcheck disable=SC2016
  printf -- 'Cannot source .pyamsoft without providing CONFIG_DIR as $1: %s\n' "$*"
  return 1
fi

if [ -z "$2" ]; then
  # shellcheck disable=SC2016
  printf -- 'Cannot source .pyamsoft without providing OS as $2: %s\n' "$*"
  return 1
fi

_cfg="$1"
_os="$2"

# Create the environment flag
if [ -z "${PYAMSOFT_ENVIRONMENT}" ]; then
  PYAMSOFT_ENVIRONMENT=""
fi

for _env_conf in "${_cfg}"/pyamsoft.d/*.conf; do
  # shellcheck disable=SC1090
  [ -r "${_env_conf}" ] && {
    case "${_env_conf}" in
    *.linux)
      if [ "${_os}" = "Linux" ]; then
        . "${_env_conf}" "$@" || {
          printf -- 'Linux ENV setup script failed: %s args=%s\n' "${_env_conf}" "$*"
        }
      fi
      ;;
    *.macos)
      if [ "${_os}" = "Darwin" ]; then
        . "${_env_conf}" "$@" || {
          printf -- 'MacOS ENV setup script failed: %s args=%s\n' "${_env_conf}" "$*"
        }
      fi
      ;;
    *)
      . "${_env_conf}" "$@" || {
        printf -- 'ENV setup script failed: %s args=%s\n' "${_env_conf}" "$*"
      }
      ;;
    esac
  }
  unset _env_conf
done
unset _env_conf

# Mark environment as set up
export PYAMSOFT_ENVIRONMENT

return 0
