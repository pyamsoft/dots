#!/bin/sh

_check_user() {
  if  id -u "${_target_user}" >/dev/null 2>&1; then
    printf -- 'Target user %s already exists!\n' "${_target_user}"
    return 1
  fi

  return 0
}

_install_launcher() {
  printf -- 'Install user launcher: %s\n' "${_target_user}"

  printf -- '%s' "$(cat <<EOF
#!/bin/sh

env | sort
if [ -n "${GAMER_GAMESCOPE}" ] && [ "${GAMER_GAMESCOPE}" -ne 0 ]; then
  exec gametime ${_cmd} "\$@"
else
  exec "${_cmd}" "\$@"
fi
EOF
)" | sudo tee /home/"${_target_user}"/bin/launcher >/dev/null || {
  printf -- 'Failed to install launcher for user %s\n' "${_target_user}"
  return 1
}

  # Mark exec
  sudo chmod 700 /home/"${_target_user}"/bin/launcher || {
    printf -- 'Failed to exec-mark launcher for user %s\n' "${_target_user}"
    return 1
  }
}

_bash_files() {
  printf -- 'Install user bash profile files: %s\n' "${_target_user}"

  sudo cp ./gaming-bashrc /home/"${_target_user}"/.bashrc || {
    printf -- 'Failed to install bashrc for %s\n' "${_target_user}"
    return 1
  }
  sudo cp ./gaming-bash_profile /home/"${_target_user}"/.bash_profile || {
    printf -- 'Failed to install bash_profile for %s\n' "${_target_user}"
    return 1
  }

  sudo cp ./gaming-bash_logout /home/"${_target_user}"/.bash_logout || {
    printf -- 'Failed to install bash_logout for %s\n' "${_target_user}"
    return 1
  }

  return 0
}

_make_dirs() {
  printf -- 'Make user directories: %s\n' "${_target_user}"

  sudo mkdir -p \
    /home/"${_target_user}"/bin \
    /home/"${_target_user}"/.cache \
    /home/"${_target_user}"/.config/systemd/user \
    /home/"${_target_user}"/.config/environment.d \
    /home/"${_target_user}"/.local/share || return 1
  return 0
}

_take_ownership() {
  printf -- 'Claim user ownership: %s\n' "${_target_user}"

  # Update access perms
  sudo chown "${_target_user}:${_target_user}" -R /home/"${_target_user}" || {
    printf -- 'Failed to own %s home\n' "${_target_user}"
    return 1
  }
  sudo chmod o-rwx -R /home/"${_target_user}" || {
    printf -- 'Failed to close off %s home to OTHER\n' "${_target_user}"
    return 1
  }
  sudo chmod g+rwX -R /home/"${_target_user}" || {
    printf -- 'Failed to allow %s home to GROUP\n' "${_target_user}"
    return 1
  }
  sudo chmod u+rwX -R /home/"${_target_user}" || {
    printf -- 'Failed to allow %s home to USER\n' "${_target_user}"
    return 1
  }

  return 0
}

_copy_env() {
  printf -- 'Copy main-user environment: %s\n' "${_target_user}"

  sudo rm -rf /home/"${_target_user}"/.config/environment.d/* || {
    printf -- 'Failed to clean up target environment.d\n'
    return 1
  }
  sudo mkdir -p /home/"${_target_user}"/.config/environment.d || {
    printf -- 'Failed to mkdir target environment.d\n'
    return 1
  }
  sudo cp "${HOME}"/.config/environment.d/* /home/"${_target_user}"/.config/environment.d/ || {
    printf -- 'Failed to copy into target environment.d\n'
    return 1
  }
  return 0
}

_mask_systemd() {
  printf -- 'Mask systemctl services: %s\n' "${_target_user}"

  sudo mkdir -p /home/"${_target_user}"/.config/systemd/user || {
    printf -- 'Failed to mkdir target systemctl config.d\n'
    return 1
  }

  for _s in "pipewire.service" "pipewire-pulse.service" "pipewire.socket" "pipewire-pulse.socket"; do
    sudo ln -s /dev/null "${HOME}"/.config/systemd/user/"${_s}" || {
      printf -- 'Failed to mask %s\n' "${_s}"
      return 1
    }
  done
  return 0
}

_create_user() {
  printf -- 'Create target user: %s\n' "${_target_user}"

  sudo useradd --create-home --shell /bin/bash --user-group "${_target_user}" || {
    printf -- 'Unable to create target user: %s\n' "${_target_user}"
    return 1
  }

  return 0
}

main() {
  _target_user="$1"
  if [ -z "${_target_user}" ]; then
    printf -- 'Need a target user to setup!\n'
    return 1
  fi

  _cmd="${_target_user}"
  _target_user="gaming-${_target_user}"
  readonly _cmd
  readonly _target_user

  if _check_user; then
    _create_user || return 1
  fi

  _make_dirs || return 1
  _bash_files || return 1
  _copy_env || return 1
  _mask_systemd || return 1
  _install_launcher || return 1
  _take_ownership || return 1

  return 0
}

main "$@" || exit 1
exit 0
