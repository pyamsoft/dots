#!/bin/sh

# Let it daemonize
if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
  shift
  _how="-d"
else
  _how="--rm"
fi
readonly _how

readonly _name="adguardhome"
readonly _image="docker.io/adguard/adguardhome"
readonly _tag="v0.107.32"

# On MacOS we use a VM, make sure it is rootful to bind to port 53
if [ "$(uname)" = "Darwin" ]; then
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a normal user with a rootful VM\n'
    exit 1
  fi

  # On MacOS for some reason we are unable to write to the work/sessions.db
  # This is okay I guess, since it only controls logs
  #
  # readonly _mount2="${HOME}/.local/etc/containers/${_name}/work"

  readonly _mount1="${HOME}/.local/etc/containers/${_name}/conf"
  mkdir -p "${_mount1}" || exit 1
  _mounts="--mount type=bind,source=${_mount1},target=/opt/adguardhome/conf"

  # On MacOS we can't use 127.0.0.1 syntax for ports
  #
  # NOTE: On MacOS in order to bind to port 53, you need to edit the VM
  #
  # Use podman machine ssh to enter the VM shell, and edit /etc/systemd/resolved.conf
  # to turn off the Stub listener or it will occupy port 53 of the VM
  _ports="-p 53:53/tcp -p 53:53/udp -p 81:81/tcp"

  # On MacOS we need these extra caps
  _caps="--cap-add DAC_OVERRIDE --cap-add FOWNER"
else
  if [ "$(id -u)" -ne 0 ]; then
    printf -- 'You must run this as a rootful container\n'
    exit 1
  fi

  readonly _mount1="/usr/local/etc/containers/${_name}/conf"
  readonly _mount2="/usr/local/etc/containers/${_name}/work"

  # Prep the directories
  mkdir -p "${_mount1}" || exit 1
  mkdir -p "${_mount2}" || exit 1
  _mounts="--mount type=bind,source=${_mount1},target=/opt/adguardhome/conf \
    --mount type=bind,source=${_mount2},target=/opt/adguardhome/work"

  # Ports on Linux can use 127 syntax
  _ports="-p 127.0.0.1:53:53/tcp \
    -p 127.0.0.1:53:53/udp \
    -p 127.0.0.1:81:81/tcp"

  # No extra caps on Linux
  _caps=""
fi
readonly _mounts
readonly _ports
readonly _caps

# Use docker or podman (priority podman)
_cmd="docker"
if command -v podman >/dev/null; then
  _cmd="podman"
fi
readonly _cmd

# Log the commands we use next
# Fail on errors
# Fail on unassigned
set -xeu

# Don't quote so that if user is empty it still expands
#
# shellcheck disable=SC2086
exec ${_cmd} run ${_how} \
  --name "${_name}" --hostname "${_name}" \
  --security-opt no-new-privileges:true --cap-drop ALL \
  ${_mounts} \
  ${_ports} \
  ${_caps} \
  --cap-add NET_BIND_SERVICE \
  "${_image}:${_tag}" "$@"
