#!/bin/sh

readonly _name="caddy"
readonly _image="docker.io/caddy"
readonly _tag="2.7.4"

# Use podman, don't use docker
readonly _cmd="podman"

_runas() {
  sudo -u "${_user}" -- "$@" || return 1
  return 0
}

_get_env() {
  _runas env | grep "^${1}=" | tr '=' ' ' | awk '{ print $2 }' || return 1

  unset _env_user
  return 0
}

_priv_port_drop() {
  if [ "$(uname)" != "Darwin" ]; then
    # Open privileged ports for non-root users
    # After a few seconds, close them back up.
    #
    # Since we run this overall script as root, we are "trusted" to open this
    sysctl -q net.ipv4.ip_unprivileged_port_start=80 || return 1
    (sleep 3 && sysctl -q net.ipv4.ip_unprivileged_port_start=1024) &
    return 0
  fi

  return 0
}

_prep_mounts() {
  _root_path="$(_get_env "HOME")/.local"
  readonly _root_path

  readonly _mount1="${_root_path}/etc/containers/${_name}/data"
  readonly _mount2="${_root_path}/etc/containers/${_name}/config"
  readonly _mount3="${_root_path}/etc/containers/${_name}/logs"
  readonly _caddyfile="${_root_path}/etc/containers/${_name}/Caddyfile"
  readonly _binary="/opt/caddy/bin/caddy"

  _runas mkdir -m 700 -p "${_mount1}" || return 1
  _runas mkdir -m 700 -p "${_mount2}" || return 1
  _runas mkdir -m 700 -p "${_mount3}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/data"
  _mounts="${_mounts} --mount type=bind,source=${_mount2},target=/config"
  _mounts="${_mounts} --mount type=bind,source=${_mount3},target=/var/log/caddy"
  _mounts="${_mounts} --mount type=bind,source=${_caddyfile},target=/etc/caddy/Caddyfile"
  _mounts="${_mounts} --mount type=bind,source=${_binary},target=/usr/bin/caddy"

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""
  _caps="${_caps} --cap-add NET_BIND_SERVICE"
  _caps="${_caps} --cap-add NET_ADMIN"

  if [ "$(uname)" = "Darwin" ]; then
    _caps="${_caps} --cap-add DAC_OVERRIDE"
  fi

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # No ports

  readonly _ports
  return 0
}

_check_user() {
  # On MacOS we use a VM, make sure it is rootful to bind to port 53
  if [ "$(uname)" = "Darwin" ]; then
    if [ "$(id -u)" -eq 0 ]; then
      printf -- 'You must run this as a normal user with a rootful VM\n'
      return 1
    fi
  else
    if [ "$(id -u)" -ne 0 ]; then
      printf -- 'You must run this as a rootful container\n'
      return 1
    fi
  fi

  # Expects to be root (since the cert file is owned by root)
  _userns="--user 0:0"

  readonly _userns
}

_check_health() {
  _health=""

  # systemd does not like spawning this healthcheck
  if [ "$(uname)" != "Darwin" ]; then
    _health="--health-cmd none"
  fi

  readonly _health

  return 0
}

_containerize() {
  # Open ports to non-root users
  _priv_port_drop || return 1

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # We don't use --security-opt no-new-privileges:true since
  # the AWS VPS that this runs on does not support that option

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  _runas ${_cmd} run ${_how} \
    --name "${_name}" --hostname "${_name}" \
    --cap-drop ALL \
    --net=host \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    ${_health} \
    "${_image}:${_tag}" "$@"
}

main() {
  if [ -z "$1" ]; then
    printf -- 'Must provide target runas user\n'
    return 1
  fi

  # Make sure the target user is provided
  _user="$(id -un "$1")"
  readonly _user

  if [ -z "${_user}" ]; then
    printf -- 'Must provide target runas user\n'
    return 1
  fi

  # Consume the used var
  shift

  # Check that we are not targeting root
  if [ "$(id -u "${_user}")" -eq 0 ]; then
    printf -- 'Your target user must not be root: %s\n' "${_user}"
    return 1
  fi

  _check_user || return 1
  _check_health || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # How do we run?
  if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
    shift
    _how="-d --restart=unless-stopped"
  else
    _how="--rm -i -t"
  fi
  readonly _how

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0

