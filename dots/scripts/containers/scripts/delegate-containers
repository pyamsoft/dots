#!/bin/sh

_PROG_NAME="$(basename "$0")"
_TARGET_USER="containers"
_CONTAINER=""

_dotfiles() {
  exec git --git-dir "${HOME}"/.dotfiles --work-tree "${HOME}" "$@"
}

_usage() {
  printf -- '%s\n' "$(cat <<EOF

${_PROG_NAME} <action>

<actions>

[container]:   Exectue podman operations on containers

  ps           Runs 'podman ps', passing all arguments
  logs         Runs 'podman logs', passing all arguments
  images       Runs 'podman images', passing all arguments
  inspect      Runs 'podman inspect', passing all arguments

[system]:      System management related operations

  enter        Runs 'podman exec -it <name> sh'
  prune        Runs 'podman system prune -a'
  pull         Runs 'dotfiles pull'
  restart      Runs 'systemctl --user restart container@<name>'
  status       Runs 'systemctl --user status container@<name>'
  teardown     Runs 'container-teardown <name>'

EOF
)"
}

_check_user() {
  if ! id -u "${_TARGET_USER}" >/dev/null 2>&1; then
    printf -- 'Target user %s does not exist!\n' "${_TARGET_USER}"
    return 1
  fi

  return 0
}

_prep_container() {
  # Since the containers user lingers, we assume the XDG_RUNTIME_DIR exists, but it's not set in this sudo shell
  # So we manually set it and then call systemctl
  XDG_RUNTIME_DIR="/run/user/$(id -u)"
  export XDG_RUNTIME_DIR

  return 0
}

main() {
  if [ -z "$1" ]; then
    _usage || return 1
    return 1
  fi

  # Podman expects us to be in a accessible CWD
  cd "${HOME}" || {
    printf -- 'Unable to cd to user HOME for podman usage\n'
    return 1
  }

  if ! _check_user; then
    return 1
  fi

  if [ "$(id -u)" -ne "$(id -u "${_TARGET_USER}")" ]; then
    printf -- 'Must run this script as %s user\n' "${_TARGET_USER}"
    return 1
  fi

  # Eat argument
  _action="$1"
  shift

  case "${_action}" in
    ps|logs|images|inspect)
      exec podman "${_action}" "$@"
      ;;
    enter)
      # Use /bin/bash if it is available, otherwise use /bin/sh if times are tough.
      exec podman exec -i -t "$1" /bin/sh -c 'if [ -x /bin/bash ]; then exec /bin/bash; else exec /bin/sh; fi'
      ;;
    prune)
      exec podman system prune -a
      ;;
    pull)
      _dotfiles pull "$@"
      ;;
    status)
      _prep_container || return 1

      if [ -n "$1" ]; then
        _CONTAINER="$1"
        shift
      fi

      if [ -z "${_CONTAINER}" ]; then
        # Run as the user
        exec systemctl --user "$@"
      else
        # Run as the user
        exec systemctl --user "${_action}" "container@${_CONTAINER}" "$@"
      fi
      ;;
    restart)
      _prep_container || return 1

      _CONTAINER="$1"
      if [ -z "${_CONTAINER}" ]; then
        printf -- 'Must call %s with a container name\n' "${_action}"
        return 1
      fi
      shift

      # Run as the user
      exec systemctl --user "${_action}" "container@${_CONTAINER}" "$@"
      ;;
    teardown)
      exec container-teardown "$@"
      ;;
    *)
      printf -- 'Invalid action: "%s"\n' "${_action}"
      _usage || return 1
      return 1
      ;;
  esac

  return 0
}

main "$@" || exit 1
exit 0
