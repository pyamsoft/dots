#!/bin/sh

_PROG_NAME="$(basename "$0")"

_usage() {
  printf -- '%s\n' "$(cat <<EOF

${_PROG_NAME} <action>

<actions>
ps           Runs 'podman ps', passing all arguments
logs         Runs 'podman logs', passing all arguments
images       Runs 'podman images', passing all arguments
inspect      Runs 'podman inspect', passing all arguments

enter        Runs 'podman exec -it <name> sh'
cleanup      Runs 'podman system prune -a'
teardown     Runs 'container-teardown <name>'

EOF
)"
}

_TARGET_USER="containers"
_check_user() {
  if ! id -u "${_TARGET_USER}" >/dev/null 2>&1; then
    printf -- 'Target user %s does not exist!\n' "${_TARGET_USER}"
    return 1
  fi

  return 0
}

main() {
  if [ -z "$1" ]; then
    _usage || return 1
    return 1
  fi

  # Podman expects us to be in a accessible CWD
  cd "${HOME}" || {
    printf -- 'Unable to cd to user HOME for podman usage'
    return 1
  }

  if ! _check_user; then
    return 1
  fi

  if [ "$(id -u)" -ne "$(id -u "${_TARGET_USER}")" ]; then
    printf -- 'Must run this script as %s user\n' "${_TARGET_USER}"
    return 1
  fi

  # Eat argument
  _action="$1"
  shift

  case "${_action}" in
    ps|logs|images|inspect)
      exec podman "${_action}" "$@"
      ;;
    enter)
      # Use /bin/bash if it is available, otherwise use /bin/sh if times are tough.
      exec podman exec -i -t "$1" /bin/sh -c 'if [ -x /bin/bash ]; then exec /bin/bash; else exec /bin/sh; fi'
      ;;
    cleanup)
      exec podman system prune -a
      ;;
    teardown)
      exec container-teardown "$@"
      ;;
    *)
      printf -- 'Invalid action: "%s"\n' "${_action}"
      _usage || return 1
      return 1
      ;;
  esac

  return 0
}

main "$@" || exit 1
exit 0
