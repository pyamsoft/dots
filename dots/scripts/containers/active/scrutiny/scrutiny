#!/bin/sh

readonly _name="scrutiny"
readonly _image="ghcr.io/analogj/scrutiny"
readonly _tag="v0.8.0-omnibus"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="/usr/local/etc/containers/${_name}/config"
  readonly _mount2="/usr/local/etc/containers/${_name}/db"
  readonly _mount3="/usr/local/etc/containers/${_name}/logs"
  readonly _mount4="/usr/local/etc/containers/${_name}/scripts"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1
  mkdir -p "${_mount3}" || return 1
  mkdir -p "${_mount4}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/opt/scrutiny/config"
  _mounts="${_mounts} --mount type=bind,source=${_mount2},target=/opt/scrutiny/influxdb"
  _mounts="${_mounts} --mount type=bind,source=${_mount3},target=/opt/scrutiny/logs"
  _mounts="${_mounts} --mount type=bind,source=${_mount4},target=/scripts"

  # Needs udev from host
  _mounts="${_mounts} --mount type=bind,source=/run/udev,target=/run/udev:ro"

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # For smartctl
  _caps="${_caps} --cap-add SYS_RAWIO"

  # Work with NVME
  _caps="${_caps} --cap-add SYS_ADMIN"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  _ports="${_ports} -p 127.0.0.1:8081:8080/tcp"
  _ports="${_ports} -p 127.0.0.1:8086:8086/tcp"

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -ne 0 ]; then
    printf -- 'You must run this as a rootfull container\n'
    return 1
  fi

  # Expects to be root
  _userns="--user=0:0"

  readonly _userns

  return 0
}

_containerize() {
  # scrutiny runtime config variable
  _sc=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="/usr/local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf
  readonly _sc

  # Only compare the version minors
  _current_version="$("${_cmd}" --version | awk '{ print $3 }' | tr '.' ' ' | awk '{ print $1 "." $2}')"
  _is_cmd_new_enough="$(printf -- '%s' "${_current_version}" | awk '{ if ($1 >= 4.7) print 1; else print 0 }')"
  unset _current_version

  # MacOS can't launch with host-gateway
  _network="--add-host localhost:127.0.0.1 --dns 1.1.1.1 --dns-search=."
  if [ "$(uname)" = "Linux" ] && [ 1 -eq "${_is_cmd_new_enough}" ]; then
    _network="${_network} --add-host host.containers.internal:host-gateway"
  fi
  readonly _network

  unset _is_cmd_new_enough

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm -i -t \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --entrypoint=/scripts/init \
    ${_network} \
    ${_sc} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  if [ "$(uname)" = "Darwin" ]; then
    printf -- '%s is not supported on MacOS\n' "${_name}"
    return 1
  fi

  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # Launch the containers runtime
  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the root /run/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ]; then
    while [ ! -d "/run/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0

