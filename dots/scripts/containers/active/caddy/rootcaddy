#!/bin/sh

readonly _name="caddy"
readonly _image="docker.io/caddy"
readonly _tag="2.7.6"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _root_path="/usr/local"

  readonly _mount1="${_root_path}/etc/containers/${_name}/data"
  readonly _mount2="${_root_path}/etc/containers/${_name}/config"
  readonly _mount3="${_root_path}/etc/containers/${_name}/serve"
  readonly _mount4="${_root_path}/etc/containers/${_name}/logs"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1
  mkdir -p "${_mount3}" || return 1
  mkdir -p "${_mount4}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/data"
  _mounts="${_mounts} --mount type=bind,source=${_mount2},target=/config"
  _mounts="${_mounts} --mount type=bind,source=${_mount3},target=/serve"
  _mounts="${_mounts} --mount type=bind,source=${_mount4},target=/var/log/caddy"


  _caddyfile="/etc/caddy"
  if [ -d "${_caddyfile}" ]; then
    _mounts="${_mounts} --mount type=bind,source=${_caddyfile},target=/etc/caddy"
  fi
  unset _caddyfile

  _binary="/opt/caddy/bin/caddy"
  if [ -f "${_binary}" ]; then
    _mounts="${_mounts} --mount type=bind,source=${_binary},target=/usr/bin/caddy"
  fi
  unset _binary

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""
  _caps="${_caps} --cap-add NET_BIND_SERVICE"
  _caps="${_caps} --cap-add NET_ADMIN"

  if [ "$(uname)" = "Darwin" ]; then
    _caps="${_caps} --cap-add DAC_OVERRIDE"
  fi

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # No ports

  readonly _ports
  return 0
}

_check_user() {
  # On MacOS we use a VM, make sure it is rootful to bind to port 53
  if [ "$(uname)" = "Darwin" ]; then
    if [ "$(id -u)" -eq 0 ]; then
      printf -- 'You must run this as a normal user with a rootful VM\n'
      return 1
    fi
  else
    if [ "$(id -u)" -ne 0 ]; then
      printf -- 'You must run this as a rootful container\n'
      return 1
    fi
  fi

  # Expects to be root (since the cert file is owned by root)
  _userns="--user 0:0"

  readonly _userns
}

_containerize() {
  # Runtime configuration
  _cd=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="/usr/local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # We don't use --security-opt no-new-privileges:true since
  # the AWS VPS that this runs on does not support that option
  _sec="--cap-drop=ALL"
  if command -v hostnamectl >/dev/null && [ "$(hostnamectl hostname)" = "nerd2" ]; then
    _sec="${_sec} --security-opt no-new-privileges:true"
  fi

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run ${_how} \
    --name "${_name}" --hostname "${_name}" \
    ${_sec} \
    ${_cd} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # How do we run?
  if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
    shift
    _how="-d --restart=unless-stopped"
  else
    _how="--rm -i -t"
  fi
  readonly _how

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0

