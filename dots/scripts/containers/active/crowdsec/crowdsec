#!/bin/sh

readonly _name="crowdsec"
readonly _image="docker.io/crowdsecurity/crowdsec"
readonly _tag="v1.5.5"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _root_path="/usr/local"

  readonly _mount1="${_root_path}/etc/containers/${_name}/config"
  readonly _mount2="${_root_path}/etc/containers/${_name}/data"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1

  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/etc/crowdsec"
  _mounts="${_mounts} --mount type=bind,source=${_mount2},target=/var/lib/crowdsec/data"

  # Bouncers should live at their real directory for systemd service scripts to handle them
  if [ -d "/etc/crowdsec/bouncers" ]; then
    _mounts="${_mounts} --mount type=bind,source=/etc/crowdsec/bouncers,target=/etc/crowdsec/bouncers"
  fi

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""
  _caps="${_caps} --cap-add DAC_OVERRIDE"
  _caps="${_caps} --cap-add SETUID"
  _caps="${_caps} --cap-add SETGID"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  _ports="${_ports} -p 127.0.0.1:8080:8080/tcp"
  _ports="${_ports} -p 127.0.0.1:6060:6060/tcp"

  readonly _ports
  return 0
}

_check_user() {
  # On MacOS we use a VM, make sure it is rootful to bind to port 53
  if [ "$(uname)" = "Darwin" ]; then
    if [ "$(id -u)" -eq 0 ]; then
      printf -- 'You must run this as a normal user with a rootful VM\n'
      return 1
    fi
  else
    if [ "$(id -u)" -ne 0 ]; then
      printf -- 'You must run this as a rootful container\n'
      return 1
    fi
  fi

  # Expects to be root (since the cert file is owned by root)
  _userns="--user 0:0"

  readonly _userns
}

_containerize() {
  # Runtime configuration
  _cs=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="/usr/local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # We don't use --security-opt no-new-privileges:true since
  # the AWS VPS that this runs on does not support that option
  _sec="--cap-drop=ALL"
  if command -v hostnamectl >/dev/null && [ "$(hostnamectl hostname)" = "nerd2" ]; then
    _sec="${_sec} --security-opt no-new-privileges:true"
  fi

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run ${_how} \
    --name "${_name}" --hostname "${_name}" \
    --add-host "localhost:127.0.0.1" \
    --add-host "host.containers.internal:host-gateway" \
    --dns "1.1.1.1" \
    --dns-search=. \
    ${_sec} \
    ${_cs} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1

  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # How do we run?
  if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
    shift
    _how="-d --restart=unless-stopped"
  else
    _how="--rm -i -t"
  fi
  readonly _how

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0

