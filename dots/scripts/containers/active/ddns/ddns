#!/bin/sh

readonly _name="ddns"
readonly _image="docker.io/favonia/cloudflare-ddns"
readonly _tag="1.11.0"

# Use podman, don't use docker
readonly _cmd="podman"

_runas() {
  sudo -u "${_user}" -- "$@" || return 1
  return 0
}

_get_env() {
  _runas env | grep "^${1}=" | tr '=' ' ' | awk '{ print $2 }' || return 1

  unset _env_user
  return 0
}

_prep_mounts() {
  _mounts=""

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  _caps="${_caps} --cap-add SETUID"
  _caps="${_caps} --cap-add SETGID"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # No ports

  readonly _ports
  return 0
}

_check_user() {
  # On MacOS we use a VM, make sure it is rootful to bind to port 53
  if [ "$(uname)" = "Darwin" ]; then
    if [ "$(id -u)" -eq 0 ]; then
      printf -- 'You must run this as a normal user with a rootful VM\n'
      return 1
    fi
  else
    if [ "$(id -u)" -ne 0 ]; then
      printf -- 'You must run this as a rootful container\n'
      return 1
    fi
  fi

  # Expects to be root (since the cert file is owned by root)
  _userns=""

  readonly _userns
}

_containerize() {
  # Runtime configuration
  _dd=""

  # Source the runtime config (so we don't have to hardcode keys)
  _confdir="$(_get_env "HOME")/.local/etc/containers/${_name}"
  _runconf="${_confdir}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    _runas mkdir -p "${_confdir}" || return 1
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi
  unset _confdir

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # We don't use --security-opt no-new-privileges:true since
  # the AWS VPS that this runs on does not support that option
  _sec="--cap-drop=ALL"
  if command -v hostnamectl >/dev/null && [ "$(hostnamectl hostname)" = "nerd2" ]; then
    _sec="${_sec} --security-opt no-new-privileges:true"
  fi

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  _runas ${_cmd} run ${_how} \
    --name "${_name}" --hostname "${_name}" \
    --add-host "localhost:127.0.0.1" \
    --add-host "localhost:::1" \
    --dns "1.1.1.1" \
    --dns-search=. \
    -e PROXIED=false \
    -e IP6_PROVIDER=none \
    -e PUID=1000 \
    -e PGID=1000 \
    ${_dd} \
    ${_sec} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  if [ -z "$1" ]; then
    printf -- 'Must provide target runas user\n'
    return 1
  fi

  # Make sure the target user is provided
  _user="$(id -un "$1")"
  readonly _user

  if [ -z "${_user}" ]; then
    printf -- 'Must provide target runas user\n'
    return 1
  fi

  # Consume the used var
  shift

  # Check that we are not targeting root
  if [ "$(id -u "${_user}")" -eq 0 ]; then
    printf -- 'Your target user must not be root: %s\n' "${_user}"
    return 1
  fi

  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # How do we run?
  if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
    shift
    _how="-d --restart=unless-stopped"
  else
    _how="--rm -i -t"
  fi
  readonly _how

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0

