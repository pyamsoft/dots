#!/bin/sh

readonly _name="ddns"
readonly _image="docker.io/favonia/cloudflare-ddns"
readonly _tag="1.11.0"

# Use podman, don't use docker
readonly _cmd="podman"

_runas() {
  sudo -u "${_user}" -- "$@" || return 1
  return 0
}

_get_env() {
  _runas env | grep "^${1}=" | tr '=' ' ' | awk '{ print $2 }' || return 1

  unset _env_user
  return 0
}

_prep_mounts() {
  _mounts=""

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # No ports

  readonly _ports
  return 0
}

_check_user() {
  # On MacOS we use a VM, make sure it is rootful to bind to port 53
  if [ "$(uname)" = "Darwin" ]; then
    if [ "$(id -u)" -eq 0 ]; then
      printf -- 'You must run this as a normal user with a rootful VM\n'
      return 1
    fi
  else
    if [ "$(id -u)" -ne 0 ]; then
      printf -- 'You must run this as a rootful container\n'
      return 1
    fi
  fi

  # No need to run as root
  _userns="--user 1000:1000"

  readonly _userns
}

_containerize() {
  # Runtime configuration
  _dd=""

  # Source the runtime config (so we don't have to hardcode keys)
  _confdir="$(_get_env "HOME")/.local/etc/containers/${_name}"
  _runconf="${_confdir}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    _runas mkdir -p "${_confdir}" || return 1
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi
  unset _confdir

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf
  readonly _dd

  # Only compare the version minors
  _current_version="$("${_cmd}" --version | awk '{ print $3 }' | tr '.' ' ' | awk '{ print $1 "." $2}')"
  _is_cmd_new_enough="$(printf -- '%s' "${_current_version}" | awk '{ if ($1 >= 4.7) print 1; else print 0 }')"
  unset _current_version

  # We don't use --security-opt no-new-privileges:true since
  # the AWS VPS that this runs on does not support that option
  _sec="--cap-drop=ALL"
  if [ 1 -eq "${_is_cmd_new_enough}" ]; then
    _sec="${_sec} --security-opt no-new-privileges:true"
  fi
  readonly _sec

  # MacOS can't launch with host-gateway
  _network="--add-host localhost:127.0.0.1 --dns 1.1.1.1 --dns-search=."
  if [ "$(uname)" = "Linux" ] && [ 1 -eq "${_is_cmd_new_enough}" ]; then
    _network="${_network} --add-host host.containers.internal:host-gateway"
  fi
  readonly _network

  unset _is_cmd_new_enough

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  _runas ${_cmd} run --rm -i -t \
    --name "${_name}" --hostname "${_name}" \
    -e PROXIED=false \
    ${_network} \
    ${_dd} \
    ${_sec} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  if [ -z "$1" ]; then
    printf -- 'Must provide target runas user\n'
    return 1
  fi

  # Make sure the target user is provided
  _user="$(id -un "$1")"
  readonly _user

  if [ -z "${_user}" ]; then
    printf -- 'Must provide target runas user\n'
    return 1
  fi

  # Consume the used var
  shift

  # Check that we are not targeting root
  _uid="$(id -u "${_user}")"
  if [ "${_uid}" -eq 0 ]; then
    printf -- 'Your target user must not be root: %s\n' "${_user}"
    return 1
  fi

  # Podman expects us to be in a accessible CWD
  cd / || {
    printf -- 'Unable to cd to root for podman usage\n'
    return 1
  }

  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # Launch the containers runtime
  _runas "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the target user's ${XDG_RUNTIME_DIR}/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ]; then
    while [ ! -d "/run/user/${_uid}/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0

