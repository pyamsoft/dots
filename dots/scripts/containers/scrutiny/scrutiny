#!/bin/sh

readonly _name="scrutiny"
readonly _image="ghcr.io/analogj/scrutiny"
readonly _tag="v0.7.1-omnibus"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="${_root}/${_name}/config"
  readonly _mount2="${_root}/${_name}/db"
  readonly _mount3="${_root}/${_name}/scripts"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1
  mkdir -p "${_mount3}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/opt/scrutiny/config"
  _mounts="${_mounts} --mount type=bind,source=${_mount2},target=/opt/scrutiny/influxdb"
  _mounts="${_mounts} --mount type=bind,source=${_mount3},target=/scripts"

  # Needs udev from host
  _mounts="${_mounts} --mount type=bind,source=/run/udev,target=/run/udev:ro"

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # For smartctl
  _caps="${_caps} --cap-add SYS_RAWIO"

  # Work with NVME
  _caps="${_caps} --cap-add SYS_ADMIN"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  _ports="${_ports} -p 127.0.0.1:8080:8080/tcp"
  _ports="${_ports} -p 127.0.0.1:8086:8086/tcp"

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(uname)" = "Darwin" ]; then
    if [ "$(id -u)" -eq 0 ]; then
      printf -- 'You must run this as a normal user with a rootful VM\n'
      return 1
    fi

    _root="${HOME}/.local/etc/containers"
  else
    if [ "$(id -u)" -ne 0 ]; then
      printf -- 'You must run this as a rootful container\n'
      return 1
    fi

    _root="/usr/local/etc/containers"
  fi
  readonly _root

  # Expects to be root
  _userns="--user=0:0"

  readonly _userns

  return 0
}

_check_health() {
  _health=""

  # systemd does not like spawning this healthcheck
  if [ "$(uname)" != "Darwin" ]; then
    _health="--health-cmd none"
  fi

  readonly _health

  return 0
}

_containerize() {
  # scrutiny runtime config variable
  _sc=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="${_root}/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run ${_how} \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --entrypoint=/scripts/init \
    ${_sc} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    ${_health} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _check_health || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # How do we run?
  if [ "$1" = "-d" ] || [ "$1" = "--detach" ]; then
    shift
    _how="-d --restart=unless-stopped"
  else
    _how="--rm -i -t"
  fi
  readonly _how

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0

