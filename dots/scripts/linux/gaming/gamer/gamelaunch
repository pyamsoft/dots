#!/bin/sh

# Privileged script, to be used with gamer script and sudoers set up

_check_user() {
  _check_me="$1"
  if ! id -u "${_check_me}" >/dev/null 2>&1; then
    printf -- '[gamelaunch] Target user %s does not exist!\n' "${_check_me}"

    unset _check_me
    return 1
  fi

  unset _check_me
  return 0
}

main() {
  if [ -z "${SUDO_USER}" ]; then
    printf -- "[gamelaunch] Requires that you run as a regular user with sudo\n"
    return 1
  fi

  if [ "${SUDO_UID}" -eq 0 ]; then
    printf -- "[gamelaunch] Requires that you run as a regular user with sudo\n"
    return 1
  fi

  if [ "$(id -u)" -ne 0 ]; then
    printf -- "[gamelaunch] Requires that you run with sudo\n"
    return 1
  fi

  if [ -z "${DISPLAY}" ]; then
    printf -- "[gamelaunch] Requires a valid \$DISPLAY variable.\n"
    return 1
  fi

  if [ -z "${XAUTHORITY}" ]; then
    printf -- "[gamelaunch] Requires a valid \$XAUTHORITY variable.\n"
    return 1
  fi

  _target_user="$1"
  if [ -z "${_target_user}" ]; then
    printf -- '[gamelaunch] Requires a target user as the first argument\n'
    return 1
  fi

  shift

  # Consume gamescope
  case "$1" in
    --gamescope)
      if [ -z "$2" ]; then
        printf -- '[gamelaunch] Missing required --gamescope argument value!\n'
        return 1
      fi

      # Export gamescope
      export GAMER_GAMESCOPE="$2"

      # Eat both
      shift
      shift
      ;;
    --gamescope=*)
      _split="$(printf -- '%s\n' "$1" | tr '=' ' ' | awk '{ print $2 }')"
      if [ -z "${_split}" ]; then
        printf -- '[gamelaunch] Missing required --gamescope= argument value!\n'
        return 1
      fi

      # Export gamescope
      export GAMER_GAMESCOPE="${_split}"
      unset _split

      # Eat just one
      shift
      ;;
    *)
      ;;
  esac

  _real_user="gaming-${_target_user}"
  if ! _check_user "${_real_user}"; then
    return 1
  fi

  # input - Game controllers
  # pipewire - Faster sound performance (will still work without but may see more XRUNs)
  readonly _extra_groups="input pipewire"

  printf -- '[gamelaunch] Running command: [%s] "~/bin/launcher %s"\n' "$*"
  printf -- '[gamelaunch] Running command as target user: %s\n' "${_real_user}"
  printf -- '[gamelaunch] Running command with extra groups: %s\n' "${_extra_groups}"
  printf -- '[gamelaunch] DISPLAY=%s\n' "${DISPLAY}"
  printf -- '[gamelaunch] XAUTHORITY=%s\n' "${XAUTHORITY}"
  printf -- '[gamelaunch] GAMER_GAMESCOPE=%s\n' "${GAMER_GAMESCOPE:-0}"
  printf -- '[gamelaunch] GAMER=1\n'

  # Running machinectl shell gives us a "clean session to work with" that attaches to it's own systemctl --user session
  # and loginctl session
  #
  # Because its "clean" though, we need to manually forward our main user session "$DISPLAY" and "$XAUTHORITY"
  # to allow x11 connections.
  #
  # DO NOT FORWARD "$WAYLAND_DISPLAY" yet as multi-user on the same display isn't fully figured out yet (things crash).
  #
  # We want this 'raw ~' to not expand so that it is evaluated as the target_user home, not main_user home
  # shellcheck disable=SC2088
  exec systemd-run \
    --wait \ # Wait for execution to be done
    --pipe \ # pipe io from the service to the calling terminal
    --service-type=exec \ # Simple execution type service
    --collect \ # Garbage collect after success OR fail
    --send-sighup \ # Send HUP after terminate to signal shells
    --property="SupplementaryGroups=${_extra_groups}" \ # Run the command with temporary access to these groups
    --machine=".host" \ # Run against local machine
    --uid="${_real_user}" \ # Run as target user
    --setenv="DISPLAY=${DISPLAY}" --setenv="XAUTHORITY=${XAUTHORITY}" \ # Xorg
    --setenv="GAMER_GAMESCOPE=${GAMER_GAMESCOPE:-0}" \ # Gamescope
    --setenv="GAMER=1" \ # This is a gamer environment
    /bin/bash -l -c '~/bin/launcher' "$@"

  ## Old way
  # Required the _real_user to be permanently added to any supplementary groups,
  # which was less secure. The systemd-run way allows for temporary group access.
  #
  # exec machinectl --quiet \
  #   --setenv="DISPLAY=${DISPLAY}" --setenv="XAUTHORITY=${XAUTHORITY}" \
  #   --setenv="GAMER_GAMESCOPE=${GAMER_GAMESCOPE:-0}" \
  #   --setenv="GAMER=1" \
  #   shell "${_real_user}@.host" \
  #   /bin/bash -l -c '~/bin/launcher' "$@"
}

main "$@" || exit 1
exit 0
