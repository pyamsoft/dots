#!/bin/sh

# Variables
__gamescope_options=""
__game_environment=""
__game_tools=""
__env_tools=""

# 05/23/2025
# Enabling --steam causes no gamescope window to show up
_ENABLE_STEAM_INTEGRATION=0

_log() {
  _msg="$1"

  if [ -n "${_msg}" ]; then
    shift
  fi

  # shellcheck disable=SC2059
  printf -- "[gametime]: ${_msg}\n" "$@"
  return 0
}

_prepare_mesa_env() {
  # Use single-file shader cache
  # https://www.phoronix.com/news/Mesa-Single-File-Cache
  # https://www.phoronix.com/news/Mesa-Single-File-Cache-Issue
  # export MESA_DISK_CACHE_SINGLE_FILE=1
  # __game_environment="${__game_environment} MESA_DISK_CACHE_SINGLE_FILE=${MESA_DISK_CACHE_SINGLE_FILE}"

  # Disable vertical blank for OpenGL
  export vblank_mode=0
  __game_environment="${__game_environment} vblank_mode=${vblank_mode}"

  # Use Vulkan immediate mode (uncapped FPS and no vblank)
  # https://docs.mesa3d.org/envvars.html
  export MESA_VK_WSI_PRESENT_MODE="immediate"
  __game_environment="${__game_environment} MESA_VK_WSI_PRESENT_MODE=${MESA_VK_WSI_PRESENT_MODE}"

  # Copy over some environment fixes from gamescope-session
  # https://github.com/ChimeraOS/gamescope-session/blob/main/usr/share/gamescope-session-plus/gamescope-session-plus
  ############################################

  # Enable threading
  export mesa_glthread=true
  __game_environment="${__game_environment} mesa_glthread=${mesa_glthread}"

  # Don't wait for buffers to idle on the client side before sending them to gamescope
  export vk_xwayland_wait_ready=false
  __game_environment="${__game_environment} vk_xwayland_wait_ready=${vk_xwayland_wait_ready}"

  ############################################

  # Force VRS shading
  # https://www.phoronix.com/review/radeon-radv-vrs
  #
  # export RADV_FORCE_VRS="2x2"
  # __game_environment="${__game_environment} RADV_FORCE_VRS=${RADV_FORCE_VRS}"

  return 0
}

_prepare_proton_env() {
  # Enable NVAPI for Nvidia GPUs
  export PROTON_ENABLE_NVAPI=1
  __game_environment="${__game_environment} PROTON_ENABLE_NVAPI=${PROTON_ENABLE_NVAPI}"

  # Report Nvidia GPU is AMD
  export PROTON_HIDE_NVIDIA_GPU=0
  __game_environment="${__game_environment} PROTON_HIDE_NVIDIA_GPU=${PROTON_HIDE_NVIDIA_GPU}"

  # Avoid free to fix crashes in some games around playing multimedia video
  export PROTON_HEAP_DELAY_FREE=1
  __game_environment="${__game_environment} PROTON_HEAP_DELAY_FREE=${PROTON_HEAP_DELAY_FREE}"

  # Borderless window
  export PROTON_NO_WM_DECORATION=1
  export WINE_NO_WM_DECORATION=1
  __game_environment="${__game_environment} PROTON_NO_WM_DECORATION=${PROTON_NO_WM_DECORATION}"
  __game_environment="${__game_environment} WINE_NO_WM_DECORATION=${WINE_NO_WM_DECORATION}"

  # Fix input in some games that expect SDL
  export PROTON_PREFER_SDL=1
  export WINE_PREFER_SDL=1
  __game_environment="${__game_environment} PROTON_PREFER_SDL=${PROTON_PREFER_SDL}"
  __game_environment="${__game_environment} WINE_PREFER_SDL=${WINE_PREFER_SDL}"

  # Copy over some environment fixes from gamescope-session
  # https://github.com/ChimeraOS/gamescope-session/blob/main/usr/share/gamescope-session-plus/gamescope-session-plus
  ############################################

  # To expose vram info from radv
  export WINEDLLOVERRIDES="dxgi=n"
  __game_environment="${__game_environment} WINEDLLOVERRIDES=${WINEDLLOVERRIDES}"

  ############################################

  return 0
}

_prepare_dxvk_env() {
  # Fun random DXVK variables!
  # https://www.reddit.com/r/linux_gaming/comments/1cyl7us/guide_to_make_xdefiant_work_without_issues_no/
  export DXVK_NVAPI_ALLOW_OTHER_DRIVERS=1
  __game_environment="${__game_environment} DXVK_NVAPI_ALLOW_OTHER_DRIVERS=${DXVK_NVAPI_ALLOW_OTHER_DRIVERS}"

  # Copy over some environment fixes from gamescope-session
  # https://github.com/ChimeraOS/gamescope-session/blob/main/usr/share/gamescope-session-plus/gamescope-session-plus
  ############################################

  # Fix bugs in old vkd3d
  export VKD3D_SWAPCHAIN_LATENCY_FRAMES=3
  __game_environment="${__game_environment} VKD3D_SWAPCHAIN_LATENCY_FRAMES=${VKD3D_SWAPCHAIN_LATENCY_FRAMES}"

  ############################################

  return 0
}

_prepare_sdl_env() {
  # These SDL vars can cause random issues with some Steam games, so unset them
  # SDL2, 1.2 compat
  # SDL3 adds underscores lol
  export SDL_VIDEODRIVER=
  export SDL_AUDIODRIVER=
  export SDL_VIDEO_DRIVER="${SDL_VIDEODRIVER}"
  export SDL_AUDIO_DRIVER="${SDL_AUDIODRIVER}"
  __game_environment="${__game_environment} SDL_VIDEODRIVER=${SDL_VIDEODRIVER}"
  __game_environment="${__game_environment} SDL_VIDEO_DRIVER=${SDL_VIDEO_DRIVER}"
  __game_environment="${__game_environment} SDL_AUDIODRIVER=${SDL_AUDIODRIVER}"
  __game_environment="${__game_environment} SDL_AUDIO_DRIVER=${SDL_AUDIO_DRIVER}"

  # Don't close the window
  export SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0
  __game_environment="${__game_environment} SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=${SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS}"

  # Wayland caling mode none (default stretch)
  export SDL_VIDEO_WAYLAND_MODE_SCALING="none"
  __game_environment="${__game_environment} SDL_VIDEO_WAYLAND_MODE_SCALING=${SDL_VIDEO_WAYLAND_MODE_SCALING}"

  return 0
}

_prepare_env() {
  _prepare_mesa_env || return 1
  _prepare_proton_env || return 1
  _prepare_dxvk_env || return 1
  _prepare_sdl_env || return 1

  return 0
}

##
# Sometimes our eGPU is connected, sometimes it's not
_has_egpu() {
  if command -v lspci >/dev/null && lspci | grep -q "RX6800"; then
    return 0
  else
    return 1
  fi
}

##
# For gamescope, the following is needed
# --devices=all;shm; is needed for Steam overlay and Steam input
# --env SDL_VIDEODRIVER=x11 must be set on the flatpak itself, not just in this file.
# You must use Proton-GE from within a flatpak, since Steam pressure-vessel messes up gamescope
# You must use Super+U to enable FSR in game
_prepare_gamescope() {
  # gamescope
  # https://github.com/Plagman/gamescope
  #
  # Run games in Fullscreen at the nested resolution (which should be shown as the only FS res)
  # FSR is between 0 (max) and 20 (min) instead of 0-5. Default is 2 => 8

  # Use a custom game window OR default to --borderless
  # borderless window should fix "clickthrough" issues in some games
  if [ -z "${GAME_WINDOW}" ]; then
    GAME_WINDOW="--borderless"
  fi
  window_type="${GAME_WINDOW}"

  # If an output resolution is defined as GAME_OUTPUT=WxH, then use it here
  # Otherwise default the output to 1080p
  # Unless we have an eGPU plugged in, then use 1440p
  if [ -z "${GAME_OUTPUT}" ]; then
    if _has_egpu; then
      # You can also provide GAME_OUTPUT_EGPU=WxH to override output resolution ONLY
      # when an eGPU is detected
      if [ -n "${GAME_OUTPUT_EGPU}" ]; then
        GAME_OUTPUT="${GAME_OUTPUT_EGPU}"
        unset GAME_OUTPUT_EGPU
      else
        GAME_OUTPUT="2560x1440"
      fi
    else
      GAME_OUTPUT="1920x1080"
    fi
  fi
  output_width="$(printf -- '%s' "${GAME_OUTPUT}" | tr 'x' ' ' | awk '{ print $1 }')"
  output_height="$(printf -- '%s' "${GAME_OUTPUT}" | tr 'x' ' ' | awk '{ print $2 }')"

  # If a nested resolution is defined as GAME_NESTED=WxH, then use it here
  # Otherwise default the nested resolution to 720p
  # Unless we have an eGPU plugged in, then use 1080p
  if [ -z "${GAME_NESTED}" ]; then
    if _has_egpu; then
      # You can also provide GAME_NESTED_EGPU=WxH to override nested resolution ONLY
      # when an eGPU is detected
      if [ -n "${GAME_NESTED_EGPU}" ]; then
        GAME_NESTED="${GAME_NESTED_EGPU}"
        unset GAME_NESTED_EGPU
      else
        GAME_NESTED="1920x1080"
      fi
    else
      # FSR1 "Quality" 1280x720 66%
      # But FSR1 is so bad generally that even this looks rough.
      #
      # We instead use a non-official scaling res of 1600x900 which is 83% of 1080p
      GAME_NESTED="1600x900"
    fi
  fi
  nested_width="$(printf -- '%s' "${GAME_NESTED}" | tr 'x' ' ' | awk '{ print $1 }')"
  nested_height="$(printf -- '%s' "${GAME_NESTED}" | tr 'x' ' ' | awk '{ print $2 }')"

  # Options passed to gamescope session
  __gamescope_options="${__gamescope_options} ${window_type}"
  __gamescope_options="${__gamescope_options} --output-height ${output_height}"
  __gamescope_options="${__gamescope_options} --output-width ${output_width}"
  __gamescope_options="${__gamescope_options} --nested-height ${nested_height}"
  __gamescope_options="${__gamescope_options} --nested-width ${nested_width}"

  # Scale the window to fill
  #
  # Scaling causes the mouse to not be in the right place
  #__gamescope_options="${__gamescope_options} --scaler fill"

  # Apply most sharpness through gamescope so it works for OpenGL
  # Then use vkBasalt for any slight extra
  # 0 is max sharpness, 20 is min sharpness
  # Slight sharpness by default and drop vkbasalt by default
  __gamescope_options="${__gamescope_options} --filter fsr --fsr-sharpness 12"

  # Force cursor grab to keep cursor in focus on Wayland
  __gamescope_options="${__gamescope_options} --force-grab-cursor"

  # Due to gamescope limiter issues, FPS limit should be double the refresh rate
  # https://github.com/ValveSoftware/gamescope/issues/995
  #
  # Just set something that's so high it won't bother us - limit FPS via in-game options
  #
  # Do NOT set the refresh rate
  # The refresh rate, in this case, is how many times gamescope ITSELF refreshes the compositor window
  # NOT the frame rate of your game. Thus, if you set it to 60, for example, but get 120 FPS in game
  # you will only visually see EVERY OTHER FRAME.
  #
  # Do NOT set this, and it will instead default to your monitor's refresh rate.
  # Otherwise, set it ridiculously high, like 2x your refresh rate
  # https://github.com/PancakeTAS/lsfg-vk/wiki/Gamescope-Compatibility#what-about-the-sdl-backend
  #
  # __gamescope_options="${__gamescope_options} --nested-refresh ${fps_max}"
  # __gamescope_options="${__gamescope_options} --nested-unfocused-refresh 15"

  # Expose Wayland
  if [ -n "${GAME_WAYLAND}" ] && [ "${GAME_WAYLAND}" -ne 0 ] && [ -n "${XDG_SESSION_TYPE}" ] && [ "${XDG_SESSION_TYPE}" = "wayland" ]; then
    _log 'Running with Wayland exposed'
    __gamescope_options="${__gamescope_options} --expose-wayland"
  fi

  # Setup for WAYLAND for gamescope-wl
  # Gamescope crashes sometimes if you are NOT using wayland and this is undefined
  #
  # Don't use or else gamescope complains about wayland
  #
  # if [ -z "${WAYLAND_DISPLAY}" ]; then
  #   export WAYLAND_DISPLAY=""
  #   __game_environment="${__game_environment} WAYLAND_DISPLAY=${WAYLAND_DISPLAY}"
  # fi
  unset WAYLAND_DISPLAY

  # Use the SDL backend
  #
  # Otherwise we run with gamescope-wl on wayland, but we want normal gamescope
  #
  # The wayland backend has some bugs still with things like mouse control that seem
  # to be fixed by SDL
  # 05/13/2025
  _log 'Force running with SDL backend'
  __gamescope_options="${__gamescope_options} --backend sdl"

  # Copy over some environment fixes from gamescope-session
  # https://github.com/ChimeraOS/gamescope-session/blob/main/usr/share/gamescope-session-plus/gamescope-session-plus
  ############################################

  # Some kind of color stream
  export GAMESCOPE_NV12_COLORSPACE="k_EStreamColorspace_BT601"
  __game_environment="${__game_environment} GAMESCOPE_NV12_COLORSPACE=${GAMESCOPE_NV12_COLORSPACE}"

  # Temporary crutch until dummy plane interactions / etc are figured out
  export GAMESCOPE_DISABLE_ASYNC_FLIPS=1
  __game_environment="${__game_environment} GAMESCOPE_DISABLE_ASYNC_FLIPS=${GAMESCOPE_DISABLE_ASYNC_FLIPS}"

  ############################################

  _log 'gamescope renderer: YES (GAME_WINDOW=%s, GAME_OUTPUT=%s, GAME_NESTED=%s)' "${GAME_WINDOW}" "${GAME_OUTPUT}" "${GAME_NESTED}"

  unset output_width
  unset output_height
  unset nested_width
  unset nested_height
  unset window_type
  unset GAME_OUTPUT
  unset GAME_NESTED
  unset GAME_WINDOW
  return 0
}

# vkBasalt
# https://github.com/DadSchoorse/vkBasalt
#
# Use with vkBasalt.conf to enable better CAS in games (gamescope has sharpening but it kinda sux)
_prepare_vkbasalt() {
  if [ -d "/usr/lib/extensions/vulkan/vkBasalt" ]; then
    if [ -n "${GAME_VKB}" ] && [ "${GAME_VKB}" -ne 0 ]; then
      __game_environment="${__game_environment} ENABLE_VKBASALT=1"
      _log 'vkBasalt post processing: YES (GAME_VKB=%s)' "${GAME_VKB}"
    else
      _log 'vkBasalt post processing: NO (GAME_VKB=%s)' "${GAME_VKB}"
    fi
  else
    _log 'vkBasalt post processing: MISSING (GAME_VKB=%s)' "${GAME_VKB}"
  fi

  unset GAME_VKB
  return 0
}

# Zink OpenGL
# https://wiki.archlinux.org/title/OpenGL#OpenGL_over_Vulkan_(Zink)
_prepare_zink() {
  if [ -n "${GAME_ZINK}" ] && [ "${GAME_ZINK}" -ne 0 ]; then
    _log 'Zink for OpenGL over Vulkan: YES (GAME_ZINK=%s)' "${GAME_ZINK}"
    __game_environment="${__game_environment} __GLX_VENDOR_LIBRARY_NAME=mesa"
    __game_environment="${__game_environment} MESA_LOADER_DRIVER_OVERRIDE=zink"
    __game_environment="${__game_environment} GALLIUM_DRIVER=zink"
  else
    _log 'Zink for OpenGL over Vulkan: NO (GAME_ZINK=%s)' "${GAME_ZINK}"
  fi

  unset GAME_ZINK
  return 0
}

# Mangohud
# https://github.com/flightlessmango/MangoHud
_prepare_mangohud() {
  _mangohud_config="fps,frametime,cpu_temp,gpu_temp,ram,vram,swap,cpu_mhz,gpu_core_clock,gpu_mem_clock,resolution,show_fps_limit,vkbasalt,gamemode,fsr,font_size=18,width=400"

  if command -v mangohud >/dev/null; then
    if [ -n "${GAME_HUD}" ] && [ "${GAME_HUD}" -ne 0 ]; then
      _log 'MangoHud performance overlay: YES (GAME_HUD=%s)' "${GAME_HUD}"
      export MANGOHUD_CONFIG="${_mangohud_config}"
      __game_tools="${__game_tools} mangohud --dlsym"
    else
      _log 'MangoHud performance overlay: NO (GAME_HUD=%s)' "${GAME_HUD}"
    fi
  else
    _log 'MangoHud performance overlay: MISSING (GAME_HUD=%s)' "${GAME_HUD}"
  fi

  unset _mangohud_config
  unset GAME_HUD
  return 0
}

_prepare_compat() {
  # Apparently some games perform better if you fake that you are a SteamDeck
  # https://www.reddit.com/r/linux_gaming/comments/1hy320b/seems_like_marvel_rivals_no_longer_runs_on_linux/
  if [ -n "${GAME_COMPAT}" ] && [ "${GAME_COMPAT}" -ne 0 ]; then
    __game_environment="${__game_environment} SteamDeck=1"
    _log 'Running in SteamDeck compat mode (GAME_COMPAT=%s)' "${GAME_COMPAT}"
  else
    _log 'Running outside of SteamDeck compat environment (GAME_COMPAT=%s)' "${GAME_COMPAT}"
  fi

  unset GAME_COMPAT
  return 0
}

_prepare_gamemode() {
  if command -v gamemoderun >/dev/null; then
    if [ -n "${GAME_MODE}" ] && [ "${GAME_MODE}" -eq 1 ]; then
      _log 'Feral gamemode: YES (GAME_MODE=%s)' "${GAME_MODE}"
      __env_tools="${__env_tools} gamemoderun"
      __game_tools="${__game_tools} gamemoderun"
    else
      _log 'Feral gamemode: NO (GAME_MODE=%s)' "${GAME_MODE}"
    fi
  else
    _log 'Feral gamemode: MISSING (GAME_MODE=%s)' "${GAME_MODE}"
  fi

  unset GAME_MODE
  return 0
}

# OBS VKCapture
# https://github.com/nowrep/obs-vkcapture
#
# Depending on steam vs others, we set te OBS_VKCAPTURE at a different scope
_prepare_obs() {
  if command -v obs-gamecapture >/dev/null; then
    if [ -n "${GAME_OBS}" ] && [ "${GAME_OBS}" -ne 0 ]; then
      __env_tools="${__env_tools} obs-gamecapture"
      _log 'OBS Game Capture: YES (GAME_OBS=%s)' "${GAME_OBS}"
    else
      _log 'OBS Game Capture: NO (GAME_OBS=%s)' "${GAME_OBS}"
    fi
  else
    _log 'OBS Game Capture: MISSING (GAME_OBS=%s)' "${GAME_OBS}"
  fi

  unset GAME_OBS
  return 0
}

_prepare() {
  _log 'Preparing gaming environment...'

  _prepare_env || return 1
  _prepare_gamemode || return 1
  _prepare_obs || return 1
  _prepare_vkbasalt || return 1
  _prepare_zink || return 1
  _prepare_mangohud || return 1
  _prepare_compat || return 1

  return 0
}

_enable_steam_options() {
  # If we are running in steam, add --steam option, otherwise do not (causes weird window issues)
  if [ "${_ENABLE_STEAM_INTEGRATION}" -eq 1 ]; then
    if [ "${FLATPAK_ID}" = "com.valvesoftware.Steam" ]; then
      __gamescope_options="${__gamescope_options} --steam"
      _log 'Steam specific gamescope options: YES (flatpak)'
      return 0
    elif [ "$(id -u -n)" = "gaming-steam" ]; then
      __gamescope_options="${__gamescope_options} --steam"
      _log 'Steam specific gamescope options: YES (gaming-steam)'
      return 0
    fi
  fi

  _log 'Steam specific gamescope options: NO'
  return 0
}

_execute() {
  if [ -z "${_gamescope}" ]; then
    _log 'exec %s -- env %s %s (%%command%%="%s")' "${__env_tools}" "${__game_environment}" "${__game_tools}" "$*"

    # shellcheck disable=SC2086
    exec ${__env_tools} -- env ${__game_environment} ${__game_tools} "$@"
  else
    _log 'exec %s %s %s -- env %s %s (%%command%%="%s")' "${__env_tools}" "${_gamescope}" "${__gamescope_options}" "${__game_environment}" "${__game_tools}" "$*"

    # shellcheck disable=SC2086
    exec ${__env_tools} ${_gamescope} ${__gamescope_options} -- env ${__game_environment} ${__game_tools} "$@"
  fi

  return 0
}

main() {
  if [ -n "${GAME_NOSCOPE}" ] && [ "${GAME_NOSCOPE}" -ne 0 ]; then
    _log 'Not using gamescope'
    _gamescope=""
  else
    _log 'Using gamescope'
    _gamescope="gamescope"
  fi

  _prepare || {
    _log 'Unable to prepare gaming environment'
    return 1
  }

  _prepare_gamescope || {
    _log 'Unable to prepare gamescope'
    return 1
  }

  _enable_steam_options || {
    _log 'Unable to enable specific Steam options'
    return 1
  }

  _execute "$@" || {
    _log 'Failed execute'
    return 1
  }
}

main "$@" || exit 1
exit 0
