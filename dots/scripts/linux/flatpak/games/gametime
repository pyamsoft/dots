#!/bin/sh

# Variables
__gamescope_options=""
__game_environment=""
__game_tools=""
__env_tools=""

_export_gaming_environment() {
  # Use single-file shader cache
  # https://www.phoronix.com/news/Mesa-Single-File-Cache
  export MESA_DISK_CACHE_SINGLE_FILE=1

  # Unset these vars as they cause issues with EAC
  export SDL_VIDEODRIVER=
  export SDL_AUDIODRIVER=
  unset SDL_VIDEODRIVER
  unset SDL_AUDIODRIVER

  # Setup for WAYLAND for gamescope-wl
  # Gamescope crashes sometimes if you are NOT using wayland and this is undefined
  if [ -z "${WAYLAND_DISPLAY}" ]; then
    export WAYLAND_DISPLAY=""
  fi

  # Optional fixes for messy graphics
  if [ -n "${GAME_FIX}" ] && [ "${GAME_FIX}" -ne 0 ]; then
    printf -- '[gametime] Applying AMD driver fixes: YES (GAME_FIX=%s)\n' "${GAME_FIX}"

    # Fix weird texture bugs
    # https://github.com/Plagman/gamescope/issues/320
    export AMD_DEBUG=nodisplaydcc
    export RADV_DEBUG=nodisplaydcc
  else
    printf -- '[gametime] Applying AMD driver fixes: NO (GAME_FIX=%s)\n' "${GAME_FIX}"
  fi

  # Disable vertical blank
  export vlank_mode=0

  # nerd1 is an iGPU, we apply even more performance tweaks
  if [ "${__hostname}" = "nerd1" ]; then
    # https://www.basnieuwenhuizen.nl/a-first-foray-into-rendering-less/
    # https://linux-gaming.kwindu.eu/index.php?title=Improving_performance#Minor_tweaks
    #
    # where we used to render 1 pixel using 1 pixel of info, we now render 2 pixels (it's like halving the resolution in a way)
    export RADV_FORCE_VRS=2x2
    export RADV_DEBUG=novrsflatshading
    printf -- '[gametime] Applying nerd1 tweaks\n'
  fi

  unset GAME_FIX
  return 0
}

_get_hostname() {
  if command -v hostnamectl >/dev/null; then
    __hostname="$(hostnamectl hostname)"
  elif command -v hostname >/dev/null; then
    __hostname="$(hostname)"
  fi

  return 0
}

##
# For gamescope, the following is needed
# --devices=all;shm; is needed for Steam overlay and Steam input
# --env SDL_VIDEODRIVER=x11 must be set on the flatpak itself, not just in this file.
# You must use Proton-GE from within a flatpak, since Steam pressure-vessel messes up gamescope
# You must use Super+U to enable FSR in game
_prepare_gamescope() {
  # gamescope
  # https://github.com/Plagman/gamescope
  #
  # Run games in Fullscreen at the nested resolution (which should be shown as the only FS res)
  # FSR is between 0 (max) and 20 (min) instead of 0-5. Default is 2 => 8
  #
  # NOTE: Shouldn't crash if the environment sets SDL_VIDEODRIVER=x11
  #
  # NOTE: If we only provide a height, gamescope will assume the width as 16x9
  #
  # NOTE: ReadyOrNot has a minimum of 1368x768, change the config file and do not touch settings to have it be lower
  #       If you open the settings in game, your FPS will go to 2.
  #       Run it with GAME_FSR=1
  #
  # NOTE: Slay the Spire won't launch in Fullscreen if the resolution is below 1280x720, use Windowed mode
  #       Or run it with GAME_FSR=1
  #
  # NOTE: FSR performance is 2.0x nested resolution.
  # NOTE: FSR balanced is 1.7x nested resolution.
  # NOTE: FSR quality is 1.5x nested resolution.
  #
  # NOTE: Do not apply any FSR sharpness with gamescope, we will use vkBasalt for that
  # NOTE: Shell math doesn't like decimals, so divide stuff by 10 instead

  # Defaults to 1080p
  window_type=""
  output_height=1080
  output_width=

  # Default to FSR quality
  fsr_amount=15

  if [ "${__hostname}" = "nerd1" ]; then
    printf -- '[gametime] Using nerd1 gamescope defaults\n'
    window_type=""

    # Quality
    #
    # For games that need performance, adjust this
    fsr_amount=15
  elif [ "${__hostname}" = "nerd2" ]; then
    printf -- '[gametime] Using nerd2 gamescope defaults\n'

    # nerd2 we just play in fullscreen
    window_type="--fullscreen"

    # Quality
    fsr_amount=15
  else
    printf -- '[gametime] Hostname "%s" unknown, use gamescope defaults\n' "${__hostname}"
  fi

  # If an output resolution is defined as GAME_RES=WxH, then use it here
  if [ -n "${GAME_RES}" ]; then
    output_width="$(printf -- '%s' "${GAME_RES}" | tr 'x' ' ' | awk '{ print $1 }')"
    output_height="$(printf -- '%s' "${GAME_RES}" | tr 'x' ' ' | awk '{ print $2 }')"
  fi

  # If we have a custom GAME_FSR amount passed in, use it
  if [ -n "${GAME_FSR}" ]; then
    if [ "${GAME_FSR}" -eq 0 ]; then
      fsr_amount=0
    else
      fsr_amount="${GAME_FSR}"
    fi
  fi

  # Calculate the nested resolution by mathing the set fsr_amount
  # fsr_amount of 0 means no FSR
  nested_height=
  nested_width=
  if [ "${fsr_amount}" -eq 0 ]; then
    # Game has its own FSR, or does not want FSR
    nested_height="${output_height}"
    if [ -n "${output_width}" ]; then
      nested_width="${output_width}"
    fi
  else
    # Calculate nested resolution by applying FSR
    nested_height="$((output_height * 10 / fsr_amount))"
    if [ -n "${output_width}" ]; then
      nested_width="$((output_width * 10 / fsr_amount))"
    fi
  fi


  # Options passed to gamescope session
  # 0 is max sharpness, 20 is min sharpness
  __gamescope_options="${__gamescope_options} ${window_type}"
  __gamescope_options="${__gamescope_options} --output-height ${output_height}"
  __gamescope_options="${__gamescope_options} --nested-height ${nested_height}"

  # Apply most sharpness through gamescope so it works for OpenGL
  # Then use vkBasalt for any slight extra
  __gamescope_options="${__gamescope_options} --filter fsr --fsr-sharpness 2"

  if [ -n "${output_width}" ]; then
    __gamescope_options="${__gamescope_options} --output-width ${output_width}"
  fi
  if [ -n "${nested_width}" ]; then
    __gamescope_options="${__gamescope_options} --nested-width ${nested_width}"
  fi

  printf -- '[gametime] gamescope renderer: YES (GAME_RES=%s, GAME_FSR=%s)\n' "${GAME_RES}" "${GAME_FSR}"

  unset output_width
  unset output_height
  unset nested_width
  unset nested_height
  unset window_type
  unset GAME_RES
  unset GAME_FSR
  return 0
}

_enable_game_env() {
  if [ -n "${GAME_VKB}" ] && [ "${GAME_VKB}" -eq 0 ]; then
    printf -- '[gametime] vkBasalt post processing: NO (GAME_VKB=%s)\n' "${GAME_VKB}"
  else
    # vkBasalt
    # https://github.com/DadSchoorse/vkBasalt
    #
    # Use with vkBasalt.conf to enable better CAS in games (gamescope has sharpening but it kinda sux)
    if [ -d "/usr/lib/extensions/vulkan/vkBasalt" ]; then
      __game_environment="${__game_environment} ENABLE_VKBASALT=1"
      printf -- '[gametime] vkBasalt post processing: YES (GAME_VKB=%s)\n' "${GAME_VKB}"
    else
      printf -- '[gametime] vkBasalt post processing: NO (GAME_VKB=%s)\n' "${GAME_VKB}"
    fi
  fi

  if [ -n "${GAME_ZINK}" ] && [ "${GAME_ZINK}" -ne 0 ]; then
    printf -- '[gametime] Zink for OpenGL over Vulkan: YES (GAME_ZINK=%s)\n' "${GAME_ZINK}"
    # Zink OpenGL
    # https://wiki.archlinux.org/title/OpenGL#OpenGL_over_Vulkan_(Zink)
    __game_environment="${__game_environment} __GLX_VENDOR_LIBRARY_NAME=mesa"
    __game_environment="${__game_environment} MESA_LOADER_DRIVER_OVERRIDE=zink"
    __game_environment="${__game_environment} GALLIUM_DRIVER=zink"
  else
    printf -- '[gametime] Zink for OpenGL over Vulkan: NO (GAME_ZINK=%s)\n' "${GAME_ZINK}"
  fi

  unset GAME_VKB
  unset GAME_ZINK
  return 0
}

_enable_env_tools() {
  if [ -n "${GAME_MODE}" ] && [ "${GAME_MODE}" -ne 0 ]; then
    # Game mode
    # https://github.com/nowrep/obs-vkcapture
    #
    # Run using gamemode for slightly more performance
    if command -v gamemoderun >/dev/null; then
      printf -- '[gametime] GameMode performance tweaks: YES (GAME_MODE=%s)\n' "${GAME_MODE}"
      __env_tools="${__env_tools} gamemoderun"
    else
      printf -- '[gametime] GameMode performance tweaks: NO (GAME_MODE=%s)\n' "${GAME_MODE}"
    fi
  else
    printf -- '[gametime] GameMode performance tweaks: NO (GAME_MODE=%s)\n' "${GAME_MODE}"
  fi

  if [ -n "${GAME_OBS}" ] && [ "${GAME_OBS}" -ne 0 ]; then
    # OBS VKCapture
    # https://github.com/nowrep/obs-vkcapture
    #
    # Depending on steam vs others, we set te OBS_VKCAPTURE at a different scope
    if command -v obs-gamecapture >/dev/null; then
      __env_tools="${__env_tools} obs-gamecapture"
      printf -- '[gametime] OBS Game Capture: YES (GAME_OBS=%s)\n' "${GAME_OBS}"
    else
      printf -- '[gametime] OBS Game Capture: NO (GAME_OBS=%s)\n' "${GAME_OBS}"
    fi
  else
    printf -- '[gametime] OBS Game Capture: NO (GAME_OBS=%s)\n' "${GAME_OBS}"
  fi

  unset GAME_MODE
  unset GAME_OBS
  return 0
}

_enable_game_tools() {
  if [ -n "${GAME_HUD}" ] && [ "${GAME_HUD}" -ne 0 ]; then
    # Mangohud
    # https://github.com/flightlessmango/MangoHud#hud-configuration
    #
    # We cannot export MANGOHUD=1 before gamescope as it will crash or not report correctly.
    # We must use gamescope to run mangohud, and then use mangohud to run our command.
    if command -v mangohud >/dev/null; then
      __game_tools="${__game_tools} mangohud --dlsym"
      export MANGOHUD_CONFIG="fps,cpu_temp,gpu_temp,ram,vram,swap,cpu_mhz,core_load,gpu_core_clock,gpu_mem_clock,resolution,show_fps_limit,vkbasalt,gamemode,font_size=18"
      printf -- '[gametime] MangoHud performance overlay: YES (GAME_HUD=%s)\n' "${GAME_HUD}"
    else
      printf -- '[gametime] MangoHud performance overlay: NO (GAME_HUD=%s)\n' "${GAME_HUD}"
    fi
  else
    printf -- '[gametime] MangoHud performance overlay: NO (GAME_HUD=%s)\n' "${GAME_HUD}"
  fi

  unset GAME_HUD
  return 0
}

_enable_flatpak_options() {
  # If we are running in steam, add --steam option, otherwise do not (causes weird window issues)
  if [ "${FLATPAK_ID}" = "com.valvesoftware.Steam" ]; then
    __gamescope_options="${__gamescope_options} --steam"
    printf -- '[gametime] Steam specific gamescope options: YES\n'
  else
    printf -- '[gametime] Steam specific gamescope options: NO\n'
  fi

  return 0
}

_execute() {
  unset __hostname

  printf -- '[gametime] env %s gamescope %s -- env %s %s %s' \
    "${__env_tools}" "${__gamescope_options}" "${__game_environment}" "${__game_tools}" "$*"
  # shellcheck disable=SC2086
  exec env ${__env_tools} gamescope ${__gamescope_options} -- env ${__game_environment} ${__game_tools} "$@"

  return 0
}

main() {
  if [ -z "${FLATPAK_ID}" ]; then
    printf -- "[gametime] Must run inside flatpak.\n"
    return
  fi

  if ! command -v gamescope > /dev/null; then
    printf -- '[gametime] Unable to find gamescope binary\n'
    return 1
  fi

  _get_hostname || {
    printf -- '[gametime] Unable to resolve hostname\n'
    __hostname=""
  }

  _export_gaming_environment || {
    printf -- '[gametime] Unable to export gaming environment\n'
    return 1
  }

  _prepare_gamescope || {
    printf -- '[gametime] Unable to prepare gamescope\n'
    return 1
  }

  _enable_env_tools || {
    printf -- '[gametime] Unable to setup __env_tools\n'
    return 1
  }

  _enable_game_tools || {
    printf -- '[gametime] Unable to setup __game_tools\n'
    return 1
  }

  _enable_game_env || {
    printf -- '[gametime] Unable to setup __game_environment\n'
    return 1
  }

  _enable_flatpak_options || {
    printf -- '[gametime] Unable to enable specific flatpak options: "%s"\n' "${FLATPAK_ID}"
    return 1
  }

  _execute "$@" || {
    printf -- '[gametime] Failed execute: "%s"\n' "${FLATPAK_ID}"
    return 1
  }
}

main "$@" || exit 1
exit 0
