#!/bin/sh

# DisplayPort monitor sometimes does not turn back on upon resume
# Poke it via xrandr to see if it will re-activate willingly.
#
# https://wiki.archlinux.org/title/Xrandr_

_setup() {
  _uid="$(id -u)"
  if [ "${_uid}" -eq 0 ]; then
    printf -- 'You must run this script as your normal user, not root!\n'
    return 1
  fi

  # Make an assumption about our Xorg environment
  if [ -z "${XAUTHORITY}" ]; then
    # Gnome on Xwayland
    for f in /run/user/"${_uid}"/.mutter-Xwaylandauth*; do
      case "$f" in
        /run/user/"${_uid}"/.mutter-Xwaylandauth\*)
          # Did not exist
          ;;
        /run/user/"${_uid}"/.mutter-Xwaylandauth*)
          # Found one
          XAUTHORITY="$f"
          printf -- 'Use /run/user/%s/.mutter-Xwaylandauth Xauthority %s\n' "${_uid}" "${XAUTHORITY}"
          ;;
      esac
    done
  fi

  # Gnome on Xorg
  if [ -z "${XAUTHORITY}" ]; then
    if [ -f "/run/user/${_uid}/gdm/Xauthority" ]; then
      XAUTHORITY="/run/user/${_uid}/gdm/Xauthority"
      printf -- 'Use GDM Xauthority %s\n' "${XAUTHORITY}"
    fi
  fi

  # With SDDM, looks like its a random file like /tmp/xauth_*
  if [ -z "${XAUTHORITY}" ]; then
    for f in /tmp/xauth_*; do
      case "$f" in
        /tmp/xauth_\*)
          # Did not exist
          ;;
        /tmp/xauth_*)
          # Found one
          XAUTHORITY="$f"
          printf -- 'Use /tmp Xauthority %s\n' "${XAUTHORITY}"
          ;;
      esac
    done
  fi

  # Console Xorg
  if [ -z "${XAUTHORITY}" ]; then
    if [ -f "${HOME}/.Xauthority" ]; then
      XAUTHORITY="${HOME}/.Xauthority"
      printf -- 'Use User Xauthority %s\n' "${XAUTHORITY}"
    fi
  fi

  if [ -z "${XAUTHORITY}" ]; then
    printf -- 'Could not find a valid Xauthority file to poke xrandr with\n'
    return 1
  fi

  printf -- 'Adopt XAUTH file: %s\n' "${XAUTHORITY}"
  export XAUTHORITY
  return 0
}

_get_active_monitor_names() {
  _active_monitors="$(xrandr --listactivemonitors | tail -n -1 | awk '{ print $4 }')"

  printf -- '%s\n' "$_active_monitors" || return 1

  unset _active_monitors
  return 0
}

_xrandr_monitor() {
  _monitors="$(_get_active_monitor_names)"
  if [ -z "${_monitors}" ]; then
    unset _monitors

    printf -- 'Could not find any active monitors. Trying with generic poke.\n'
    xrandr >/dev/null 2>&1 || {
      printf -- 'Failed to poke-monitor with xrandr [default] action\n'
      return 1
    }
    return 0
  fi

  case "$1" in
    list)
      xrandr || {
        printf -- 'Failed xrandr list\n'
        return 1
      }
      return 0
      ;;
    auto)
      _failed=0
      for _m in ${_monitors}; do
        printf -- 'Attempt "auto" poke monitor: %s %s\n' "${_m}" "${DISPLAY}"
        xrandr --output "${_m}" --auto >/dev/null 2>&1 || {
          printf -- 'Failed to "auto" poke monitor with xrandr: %s\n' "${_m}"
          _failed=1
        }
        unset _m
      done

      unset _monitors
      return "${_failed}"
      ;;
    reset)
      _failed=0
      for _m in ${_monitors}; do
        printf -- 'Attempt "reset" poke monitor: %s %s\n' "${_m}" "${DISPLAY}"
        xrandr --output "${_m}" --off >/dev/null 2>&1 || {
          printf -- 'Failed to "reset"[off] poke monitor with xrandr: %s\n' "${_m}"
          _failed=1
        }
        xrandr --output "${_m}" --auto >/dev/null 2>&1 || {
          printf -- 'Failed to "reset"[auto] poke monitor with xrandr: %s\n' "${_m}"
          _failed=1
        }
        unset _m
      done

      unset _monitors
      return "${_failed}"
      ;;
  esac
}

##
# Poke with display
_poke() {
  _display="$1"
  shift

  # Guess DISPLAY variable to poke
  DISPLAY="${_display}"
  export DISPLAY

  # Attempt countdown
  _count=2

  printf -- 'Attempting to poke monitor via xrandr: %s\n' "${DISPLAY}"
  while [ "${_count}" -gt 0 ]; do
    printf -- 'Poke: %s...\n' "${_count}"
    _xrandr_monitor "$1" || {
      printf -- 'Failed to poke monitor with xrandr: %s\n' "${DISPLAY}"

      unset DISPLAY
      unset _display
      return 1
    }

    # Wait before trying again
    sleep 1
    _count=$((_count - 1))
  done

  printf -- 'Monitor has been poked: %s\n' "${DISPLAY}"

  unset DISPLAY
  unset _display
  return 0
}

main() {
  # Validate command
  if [ -z "$1" ]; then
    printf -- 'Failed to poke-monitor. Command must be one of "auto" "reset" "list"\n'
    return 1
  fi
  case "$1" in
    auto|reset|list)
      ;;
    *)
      printf -- 'Failed to poke-monitor. Command must be one of "auto" "reset" "list"\n'
      return 1
      ;;
  esac

  # Try poking common monitor DISPLAY connections
  _setup || {
    printf -- 'Failed setup\n'
    return 1
  }

  for _mon in $(seq 0 7); do
    _poke ":${_mon}" "$1" && {
      printf -- 'Poked monitor: %s [%s]\n' "${_mon}" "$1"
      return 0
    }
  done

  # Nothing worked
  printf -- 'Failed all attempts to poke monitor :0 - :7 [%s]\n' "$1"
  return 1
}

main "$@" || exit 1
exit 0
