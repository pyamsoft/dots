#!/bin/sh

readonly _CHAIN_NAME="POOT_GEOBLOCK"
readonly _LOGDROP_CHAIN="${_CHAIN_NAME}-LOGDROP"

readonly _ACCEPT_COUNTRIES=""

readonly _ACCEPT_IP4="127.0.0.1/8"
readonly _ACCEPT_IP6="::1/128"

readonly _BLOCK_IP4=""
readonly _BLOCK_IP6=""

_remove_rule() {
  if "${_ip}" -C "$@" >/dev/null 2>&1; then
    printf -- 'Remove rule: %s -D %s\n' "${_ip}" "$*"
    "${_ip}" -D "$@" || return 1
  fi

  return 0
}

_insert_rule_if_not_exists() {
  if ! "${_ip}" -C "$@" >/dev/null 2>&1; then
    printf -- 'Inserting new rule: %s -I %s\n' "${_ip}" "$*"
    "${_ip}" -I "$@" || return 1
  fi

  return 0
}

_erase_chain() {
  _name="$1"

  printf -- 'Zeroing chain: %s %s\n' "${_ip}" "${_name}"
  "${_ip}" --zero "${_name}" || {
    unset _name
    return 1
  }

  printf -- 'Flushing chain: %s %s\n' "${_ip}" "${_name}"
  "${_ip}" --flush "${_name}" || {
    unset _name
    return 1
  }

  unset _name
  return 0
}

_prepare_chain() {
  # Drop invalid traffic
  "${_ip}" -A "${_CHAIN_NAME}" -m conntrack --ctstate INVALID -j DROP || return 1

  # Accept related/established traffic
  "${_ip}" -A "${_CHAIN_NAME}" -m conntrack --ctstate RELATED,ESTABLISHED -j RETURN || return 1

  return 0
}

_prepare_logdrop() {
  "${_ip}" -A "${_LOGDROP_CHAIN}" -j LOG --log-prefix "[${_CHAIN_NAME}]: " || return 1
  "${_ip}" -A "${_LOGDROP_CHAIN}" -j DROP || return 1
  return 0
}

_nomatch_logdrop() {
  printf -- 'Otherwise drop traffic -> %s\n' "${_LOGDROP_CHAIN}"
  "${_ip}" -A "${_CHAIN_NAME}" -j "${_LOGDROP_CHAIN}" || return 1

  return 0
}

_source_configs() {
  if [ -d "/etc/iptables-geoblock/" ]; then

    if [ "${_ip}" = "iptables" ]; then
      # IPv4 allowlist config
      for _conf in "/etc/iptables-geoblock"/*".allow.4"; do
        # If there were no matching configuration files, do nothing
        if [ "${_conf}" = "/etc/iptables-geoblock/*.allow.4" ]; then
          printf -- 'No configuration for IPv4 Allowlist found.\n'
          break
        fi

        # Otherwise source the config
        if [ -r "${_conf}" ]; then
          # Trim out all blank or comment lines
          # We must read this way from an EOF posix-sh heredoc otherwise
          # this while-loop happens in a subshell which causes the variable write
          # to not be saved
          while IFS="" read -r _i4 || [ -n "${_i4}" ]; do
            if [ -z "${_ALL_ACCEPT_IP4}" ]; then
              _ALL_ACCEPT_IP4="${_i4}"
            else
              _ALL_ACCEPT_IP4="${_ALL_ACCEPT_IP4} ${_i4}"
            fi
            unset _i4
          done << EOF
$(grep -v '^(#|[[:space:]]*$)' "${_conf}")
EOF
          unset _i4
        fi

        unset _conf
      done
      unset _conf

      # IPv4 blocklist config
      for _conf in "/etc/iptables-geoblock"/*".block.4"; do
        # If there were no matching configuration files, do nothing
        if [ "${_conf}" = "/etc/iptables-geoblock/*.block.4" ]; then
          printf -- 'No configuration for IPv4 Blocklist found.\n'
          break
        fi

        # Otherwise source the config
        if [ -r "${_conf}" ]; then
          # Trim out all blank or comment lines
          # We must read this way from an EOF posix-sh heredoc otherwise
          # this while-loop happens in a subshell which causes the variable write
          # to not be saved
          while IFS="" read -r _i4 || [ -n "${_i4}" ]; do
            if [ -z "${_ALL_BLOCK_IP4}" ]; then
              _ALL_BLOCK_IP4="${_i4}"
            else
              _ALL_BLOCK_IP4="${_ALL_BLOCK_IP4} ${_i4}"
            fi
            unset _i4
          done << EOF
$(grep -v '^(#|[[:space:]]*$)' "${_conf}")
EOF
          unset _i4
        fi

        unset _conf
      done
      unset _conf
    fi

    if [ "${_ip}" = "ip6tables" ]; then
      # IPv6 allowlist config
      for _conf in "/etc/iptables-geoblock"/*".allow.6"; do
        # If there were no matching configuration files, do nothing
        if [ "${_conf}" = "/etc/iptables-geoblock/*.allow.6" ]; then
          printf -- 'No configuration for IPv6 Allowlist found.\n'
          break
        fi

        # Otherwise source the config
        if [ -r "${_conf}" ]; then
          # Trim out all blank or comment lines
          # We must read this way from an EOF posix-sh heredoc otherwise
          # this while-loop happens in a subshell which causes the variable write
          # to not be saved
          while IFS="" read -r _i6 || [ -n "${_i6}" ]; do
            if [ -z "${_ALL_ACCEPT_IP6}" ]; then
              _ALL_ACCEPT_IP6="${_i6}"
            else
              _ALL_ACCEPT_IP6="${_ALL_ACCEPT_IP6} ${_i6}"
            fi
            unset _i6
          done << EOF
$(grep -v '^(#|[[:space:]]*$)' "${_conf}")
EOF
          unset _i6
        fi

        unset _conf
      done
      unset _conf

      # IPv6 blocklist config
      for _conf in "/etc/iptables-geoblock"/*".block.6"; do
        # If there were no matching configuration files, do nothing
        if [ "${_conf}" = "/etc/iptables-geoblock/*.block.6" ]; then
          printf -- 'No configuration for IPv6 Blocklist found.\n'
          break
        fi

        # Otherwise source the config
        if [ -r "${_conf}" ]; then
          # Trim out all blank or comment lines
          # We must read this way from an EOF posix-sh heredoc otherwise
          # this while-loop happens in a subshell which causes the variable write
          # to not be saved
          while IFS="" read -r _i6 || [ -n "${_i6}" ]; do
            if [ -z "${_ALL_BLOCK_IP6}" ]; then
              _ALL_BLOCK_IP6="${_i6}"
            else
              _ALL_BLOCK_IP6="${_ALL_BLOCK_IP6} ${_i6}"
            fi
            unset _i6
          done << EOF
$(grep -v '^(#|[[:space:]]*$)' "${_conf}")
EOF
          unset _i6
        fi

        unset _conf
      done
      unset _conf
    fi

    # Country allowlist config
    for _conf in "/etc/iptables-geoblock"/*".allow.country"; do
      # If there were no matching configuration files, do nothing
      if [ "${_conf}" = "/etc/iptables-geoblock/*.allow.country" ]; then
        printf -- 'No configuration for Country Allowlist found.\n'
        break
      fi

      # Otherwise source the config
      if [ -r "${_conf}" ]; then
        # Trim out all blank or comment lines
        # We must read this way from an EOF posix-sh heredoc otherwise
        # this while-loop happens in a subshell which causes the variable write
        # to not be saved
        while IFS="" read -r _ic || [ -n "${_ic}" ]; do
          if [ -z "${_ALL_ACCEPT_COUNTRIES}" ]; then
            _ALL_ACCEPT_COUNTRIES="${_ic}"
          else
            _ALL_ACCEPT_COUNTRIES="${_ALL_ACCEPT_COUNTRIES} ${_ic}"
          fi
          unset _ic
        done << EOF
$(grep -v '^(#|[[:space:]]*$)' "${_conf}")
EOF
        unset _ic
      fi

      unset _conf
    done
    unset _conf
  fi

  return 0
}

_apply_whitelist() {
  _ALL_ACCEPT_IP4="${_ACCEPT_IP4}"
  _ALL_ACCEPT_IP6="${_ACCEPT_IP6}"
  _ALL_ACCEPT_COUNTRIES="${_ACCEPT_COUNTRIES}"

  _ALL_BLOCK_IP4="${_BLOCK_IP4}"
  _ALL_BLOCK_IP6="${_BLOCK_IP6}"

  # Read from configuration if they exist
  _source_configs || {
    printf -- 'Failed to source configuration from /etc/iptables-geoblock\n'
    return 1
  }

  if [ "${_ip}" = "iptables" ]; then
    # Accept any good IPv4 address
    if [ -n "${_ALL_ACCEPT_IP4}" ]; then
      for _c in ${_ALL_ACCEPT_IP4}; do
        printf -- 'Accept IPv4: %s\n' "${_c}"
        "${_ip}" -A "${_CHAIN_NAME}" --source "${_c}" -j RETURN
      done
    else
      printf -- 'No IPv4 addresses to whitelist.\n'
    fi

    # Block any bad IPv4 address
    if [ -n "${_ALL_BLOCK_IP4}" ]; then
      for _c in ${_ALL_BLOCK_IP4}; do
        printf -- 'Block IPv4: %s\n' "${_c}"
        "${_ip}" -A "${_CHAIN_NAME}" --source "${_c}" -j "${_LOGDROP_CHAIN}"
      done
    else
      printf -- 'No IPv4 addresses to block.\n'
    fi
  fi

  if [ "${_ip}" = "ip6tables" ]; then
    # Accept any good IPv6 address
    if [ -n "${_ALL_ACCEPT_IP6}" ]; then
      for _c in ${_ALL_ACCEPT_IP6}; do
        printf -- 'Accept IPv6: %s\n' "${_c}"
        "${_ip}" -A "${_CHAIN_NAME}" --source "${_c}" -j RETURN
      done
    else
      printf -- 'No IPv6 addresses to whitelist.\n'
    fi

    # Block any bad IPv6 address
    if [ -n "${_ALL_BLOCK_IP6}" ]; then
      for _c in ${_ALL_BLOCK_IP6}; do
        printf -- 'Block IPv6: %s\n' "${_c}"
        "${_ip}" -A "${_CHAIN_NAME}" --source "${_c}" -j "${_LOGDROP_CHAIN}"
      done
    else
      printf -- 'No IPv6 addresses to block.\n'
    fi
  fi

  # Accept any good countries
  if [ -n "${_ALL_ACCEPT_COUNTRIES}" ]; then
    for _c in ${_ALL_ACCEPT_COUNTRIES}; do
      printf -- 'Accept traffic from country: %s\n' "${_c}"
      "${_ip}" -A "${_CHAIN_NAME}" -m geoip --src-cc "${_c}" -j RETURN || {
        printf -- 'Failed to load "geoip" xtables addon module.\n'
        return 1
      }
    done
  else
    printf -- '!!! No Countries to whitelist! You are blocking all traffic !!!\n'
  fi

  return 0
}

_reset_chain() {
  # If this fails I guess its ok, the chain doesn't exist so we don't need to erase it
  _erase_chain "${_CHAIN_NAME}"
  _erase_chain "${_LOGDROP_CHAIN}"

  # Conntrack and drop invalid first
  _prepare_chain || {
    printf -- 'Failed to prepare chain %s\n' "${_CHAIN_NAME}"
    return 1
  }

  _prepare_logdrop || {
    printf -- 'Failed to prepare logdrop chain %s\n' "${_LOGDROP_CHAIN}"
    return 1
  }

  _apply_whitelist || {
    printf -- 'Failed applying whitelist to chain %s\n' "${_CHAIN_NAME}"
    return 1
  }

  # Otherwise drop
  _nomatch_logdrop || {
    printf -- 'Failed final nomatch-logdrop setup for %s\n' "${_CHAIN_NAME}"
    return 1
  }

  return 0
}

_iptables_create() {
  _create_opts="$1"

  if "${_ip}" --new-chain "${_CHAIN_NAME}" >/dev/null 2>&1; then
    printf -- 'Create new chain: %s\n' "${_CHAIN_NAME}"
  else
    printf -- 'Refresh existing chain: %s\n' "${_CHAIN_NAME}"
  fi

  if "${_ip}" --new-chain "${_LOGDROP_CHAIN}" >/dev/null 2>&1; then
    printf -- 'Create new chain: %s\n' "${_LOGDROP_CHAIN}"
  else
    printf -- 'Refresh existing chain: %s\n' "${_LOGDROP_CHAIN}"
  fi

  _remove_rule INPUT -j "${_CHAIN_NAME}" || {
    unset _create_opts
    return 1
  }

  _reset_chain || {
    unset _create_opts
    return 1
  }

  _insert_rule_if_not_exists INPUT -j "${_CHAIN_NAME}" || {
    unset _create_opts
    return 1
  }

  unset _create_opts
  return 0
}

_iptables_destroy() {
  _destroy_opts="$1"

  _remove_rule INPUT -j "${_CHAIN_NAME}" || {
    unset _destroy_opts
    return 1
  }

  _erase_chain "${_CHAIN_NAME}" || {
    unset _destroy_opts
    return 1
  }

  _erase_chain "${_LOGDROP_CHAIN}" || {
    unset _destroy_opts
    return 1
  }

  unset _destroy_opts
  return 0
}

_parse_cmd() {
  # Global __command exists
  if [ -z "$1" ]; then
    printf -- 'Must specify one of "create" "destroy"\n'
    return 1
  fi

  case "$1" in
    "create" | "destroy")
      __command="$1"
      ;;
    *)
      printf -- 'Must specify one of "create" "destroy": %s\n' "$1"
      return 1
      ;;
  esac

  return 0
}

_exec_cmd() {
  _cmd="$1"
  _opts="$2"

  if [ -z "${_cmd}" ]; then
    printf -- 'Must specify one of "create" "destroy"\n'

    unset _cmd
    unset _opts
    return 1
  fi

  if [ "${_cmd}" = "create" ]; then
    _iptables_create "${_opts}" || {
      printf -- 'Failed to create iptables rules. Clean up and exit(1)'
      _iptables_destroy "${_opts}" || return 1
      return 1
    }
  elif [ "${_cmd}" = "destroy" ]; then
    _iptables_destroy "${_opts}" || return 1
  else
    printf -- 'Unknown execute command: %s (%s)\n' "${_cmd}" "${_opts}"

    unset _cmd
    unset _opts
    return 1
  fi

  unset _cmd
  unset _opts
  return 0
}

_parse_ipv() {
  if [ -z "$1" ]; then
    printf -- 'Must specify one of "4" "6"\n'
    return 1
  fi

  if [ "$1" = "4" ]; then
    _ip="iptables"
  elif [ "$1" = "6" ]; then
    _ip="ip6tables"
  else
    printf -- 'Must specify one of "4" "6": %s\n' "$1"
    return 1
  fi

  # Do not touch!
  readonly _ip
  return 0
}

main() {
  if [ "$(id -u)" -ne 0 ]; then
    printf -- 'Must run as root.\n'
    return 1
  fi

  _parse_ipv "$1" || return 1
  shift

  __command=""
  _parse_cmd "$1" || return 1
  shift

  _exec_cmd "${__command}" "$@" || return 1

  return 0
}

main "$@" || exit 1
exit 0
