#!/bin/sh

##
# hub - the Beszel hub
# agent - Agent instance running on the same machine as the hub
#   - Requires runconfig.env to contain [TOKEN and HUB_URL] or [LISTEN]
# remote - Agent instance running on a different machine than the hub
#   - Requires runconfig.env to contain [TOKEN and HUB_URL] and export [BESZEL_KEY]
case "${BESZEL_MODE}" in
hub | agent | remote) ;;
*)
  printf -- 'Must run with BESZEL_MODE set to one of "agent" "hub" "remote"\n'
  exit 1
  ;;
esac

readonly _basename="beszel"
readonly _name="${_basename}-${BESZEL_MODE}"
if [ "${BESZEL_MODE}" = "hub" ]; then
  _image="docker.io/henrygd/beszel"
else
  _image="docker.io/henrygd/beszel-agent"
fi
readonly _image
readonly _tag="0.12.12"

# Use podman, don't use docker
if command -v podman >/dev/null; then
  _cmd="podman"
elif command -v docker >/dev/null; then
  _cmd="docker"
else
  printf -- 'Requires either "podman" or "docker" ("podman" preferred)\n'
  exit 1
fi
readonly _cmd

_prep_ssh_key() {
  _data_dir="$1"

  if [ "${BESZEL_MODE}" = "agent" ]; then
    # Read the SSH pubkey
    if [ -e "${_data_dir}/id_ed25519.pub" ]; then
      BESZEL_KEY="$(awk '{ print $1 " " $2 }' <"${_data_dir}/id_ed25519.pub")"
      export BESZEL_KEY
    fi
  else
    # Create the private SSH key if it does not already exist
    if [ ! -e "${_data_dir}/id_ed25519" ]; then
      ssh-keygen -q -N "" -C "" -t ed25519 -f "${_data_dir}/id_ed25519" || {
        printf -- 'Failed to generate private SSH key\n'
        return 1
      }
    fi

    # Create the public SSH key if it does not already exist
    if [ ! -e "${_data_dir}/id_ed25519.pub" ]; then
      ssh-keygen -q -N "" -C "" -y -f "${_data_dir}/id_ed25519" || {
        printf -- 'Failed to generate public SSH key\n'
        return 1
      }
    fi
  fi

  unset _data_dir
  return 0
}

_prep_mounts() {
  # Hub and Agent share a socket
  _hub_data="${HOME}/.local/etc/containers/${_basename}-hub/data"

  mkdir -p "${HOME}/.local/etc/containers/${_basename}-agent" || return 1
  mkdir -p "${_hub_data}" || return 1

  if [ "${BESZEL_MODE}" != "remote" ]; then
    # Make SSH keys
    _prep_ssh_key "${_hub_data}" || return 1
  fi

  _mounts=""
  if [ "${BESZEL_MODE}" = "hub" ]; then
    _mounts="${_mounts} --mount type=bind,source=${_hub_data},target=/beszel_data"
  fi

  unset _hub_data
  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  if [ "${BESZEL_MODE}" = "hub" ]; then
    _ports="${_ports} -p 127.0.0.1:8090:8090/tcp"
  fi

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  # Only for podman
  if [ "${_cmd}" = "podman" ]; then
    # Need this userns option that is podman specific or we have random OCI permission error
    _userns="--userns keep-id"
  else
    _userns=""
  fi
  readonly _userns

  return 0
}

_containerize() {
  _bz=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="${HOME}/.local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # On Linux, our user session executes from systemd and thus sets the systemd vars
  # like JOURNAL_STREAM and INVOCATION_ID
  #
  # We cannot reliably use them to sniff "am I being ran by systemd"
  #
  # As such our services set a special PYAM_SYSTEMD variable and we sniff that
  if [ "$(uname)" = "Linux" ] && [ -n "${PYAM_SYSTEMD}" ]; then
    if [ "${_cmd}" = "podman" ]; then
      _bz="${_bz} --log-driver json-file"
    fi
  else
    _bz="${_bz} -i -t"
  fi
  readonly _bz

  # We use our container DNS resolver
  # MacOS can't launch with host-gateway
  # On Linux we run systemd-resolved on our host machine for DNS caching
  _network="--add-host localhost:127.0.0.1 --dns-search=."
  if [ "$(uname)" = "Linux" ] && [ "${_cmd}" = "podman" ]; then
    _network="${_network} --add-host host.containers.internal:host-gateway"
  fi

  if [ "${BESZEL_MODE}" != "remote" ]; then
    # Agent must run with host networking
    _network="${_network} --net=host"
  fi
  readonly _network

  if [ "${BESZEL_MODE}" != "remote" ]; then
    if [ -z "${BESZEL_KEY}" ]; then
      printf -- 'You must export the Beszel Agent SSH Key as "BESZEL_KEY"\n'
      return 1
    fi
  else
    # Can continue with blank key, it's ignored in hub mode
    BESZEL_KEY=""
  fi

  # Auto Update Checking support
  _auto="--label=io.containers.autoupdate=registry"
  _auto="${_auto} --label=PODMAN_SYSTEMD_UNIT=not-a-real.service"
  readonly _auto

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    -e "KEY=${BESZEL_KEY}" \
    ${_bz} \
    ${_network} \
    ${_auto} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the ${XDG_RUNTIME_DIR}/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ] && [ "${_cmd}" = "podman" ]; then
    while [ ! -d "${XDG_RUNTIME_DIR}/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
