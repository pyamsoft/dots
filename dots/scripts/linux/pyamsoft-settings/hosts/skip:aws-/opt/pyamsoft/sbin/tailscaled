#!/bin/sh

# This script is designed ONLY to run tailscale in a container as ROOT
#
# This is so that we can bind directly to the host IP stack and create a virt device
# for tailscale on the host
#
# The Tailscale container upstream supports non-root running as a normal user via
# TS_USERSPACE, but this does not allow host access so we do not use it

readonly _name="tailscale"
readonly _image="docker.io/tailscale/tailscale"
readonly _tag="v1.88.4"

# Use podman, don't use docker
if command -v podman >/dev/null; then
  _cmd="podman"
elif command -v docker >/dev/null; then
  _cmd="docker"
else
  printf -- 'Requires either "podman" or "docker" ("podman" preferred)\n'
  exit 1
fi
readonly _cmd

_prep_mounts() {
  readonly _mount1="/usr/local/etc/containers/${_name}/data"

  mkdir -p "${_mount1}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/var/lib/tailscale"

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  # For networking
  _caps="${_caps} --cap-add NET_ADMIN"
  _caps="${_caps} --cap-add NET_RAW"

  # Allow loading kernel module
  _caps="${_caps} --cap-add SYS_MODULE"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  readonly _ports
  return 0
}

_prep_env() {
  _env=""

  # Kernel networking
  _env="${_env} -e TS_USERSPACE=false"

  # Assign state dir as bound directory
  _env="${_env} -e TS_STATE_DIR=/var/lib/tailscale"

  # Use host level networking
  _env="${_env} --net=host --device /dev/net/tun:/dev/net/tun"

  # Force firewall to nftables (the container picks iptables-legacy by default)
  # Buggy currently, breaks Direct mode connections (always uses relay for some reason)
  # https://github.com/tailscale/tailscale/issues/14900
  #
  # Do not set this if you want to use --netfilter-mode=off via TS_EXTRA_ARGS
  #_env="${_env} -e TS_DEBUG_FIREWALL_MODE=nftables"

  readonly _env
  return 0
}

_check_user() {
  if [ "$(id -u)" -ne 0 ]; then
    printf -- 'You must run this as a rootfull container\n'
    return 1
  fi

  # Expects to be root
  _userns="--user=0:0"

  readonly _userns

  return 0
}

_containerize() {
  # tailscale runtime config variable
  _ts=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="/usr/local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # On Linux, our user session executes from systemd and thus sets the systemd vars
  # like JOURNAL_STREAM and INVOCATION_ID
  #
  # We cannot reliably use them to sniff "am I being ran by systemd"
  #
  # As such our services set a special PYAM_SYSTEMD variable and we sniff that
  if [ "$(uname)" = "Linux" ] && [ -n "${PYAM_SYSTEMD}" ]; then
    if [ "${_cmd}" = "podman" ]; then
      _ts="${_ts} --log-driver json-file"
    fi
  else
    _ts="${_ts} -i -t"
  fi
  readonly _ts

  # We use our container DNS resolver
  # MacOS can't launch with host-gateway
  # On Linux we run systemd-resolved on our host machine for DNS caching
  _network="--add-host localhost:127.0.0.1 --dns-search=."
  if [ "$(uname)" = "Linux" ] && [ "${_cmd}" = "podman" ]; then
    # Only compare the version minors
    _current_version="$("${_cmd}" --version | awk '{ print $3 }' | tr '.' ' ' | awk '{ print $1 "." $2}')"
    _is_cmd_new_enough="$(printf -- '%s' "${_current_version}" | awk '{ if ($1 >= 4.7) print 1; else print 0 }')"
    unset _current_version

    if [ 1 -eq "${_is_cmd_new_enough}" ]; then
      _network="${_network} --add-host host.containers.internal:host-gateway"
    fi

    unset _is_cmd_new_enough
  fi
  readonly _network

  # Auto Update Checking support
  _auto="--label=io.containers.autoupdate=registry"
  _auto="${_auto} --label=PODMAN_SYSTEMD_UNIT=not-a-real.service"
  readonly _auto

  # Assign a port or else the container picks one at random
  #
  # Provide the daemon with a port argument. The container runs with a random port
  # so it makes it difficult to setup SNAT rules in a firewall like Opnsense, as the
  # port would need to be a wildcard. Instead, we allow the runconfig to specify a port
  # via TS_PORT and fallback to the Tailscale default of 41641
  PORT="${TS_PORT:-41641}"

  # TS_EXTRA_ARGS
  #
  # We disable netfilter firewall management since we don't want the container touching
  # the host firewall. For hosts which need an exit node, they should override
  # the extra args in the runconfig.env
  #
  # Buggy currently, breaks Direct mode connections (always uses relay for some reason)
  # https://github.com/tailscale/tailscale/issues/14900
  TS_EXTRA_ARGS="${TS_EXTRA_ARGS:---netfilter-mode=off}"

  # TS_TAILSCALED_EXTRA_ARGS
  #
  # We want to disable telemetry, which also turns off our ability
  # for support - but that's ok because we don't need support right?
  # Things just work right?
  #
  # Provide the daemon with a port argument. The container runs with a random port
  # so it makes it difficult to setup SNAT rules in a firewall like Opnsense, as the
  # port would need to be a wildcard. Instead, we allow the runconfig to specify a port
  # via TS_PORT and fallback to the Tailscale default of 41641
  TS_TAILSCALED_EXTRA_ARGS="${TS_TAILSCALED_EXTRA_ARGS:---port=${PORT} --no-logs-no-support}"

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  ###
  #
  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    -e TS_EXTRA_ARGS="${TS_EXTRA_ARGS}" \
    -e TS_TAILSCALED_EXTRA_ARGS="${TS_TAILSCALED_EXTRA_ARGS}" \
    -e PORT="${PORT}" \
    ${_ts} \
    ${_env} \
    ${_network} \
    ${_auto} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  if [ "$(uname)" = "Darwin" ]; then
    printf -- '%s is not supported on MacOS\n' "${_name}"
    return 1
  fi

  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_env || return 1
  _prep_caps || return 1

  # Launch the containers runtime
  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the root /run/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ] && [ "${_cmd}" = "podman" ]; then
    while [ ! -d "/run/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
