#!/bin/sh

readonly _name="piper"
readonly _image="docker.io/homeassistant/amd64-addon-piper"
readonly _tag="1.6.4"

# Use podman, don't use docker
if command -v podman >/dev/null; then
  _cmd="podman"
elif command -v docker >/dev/null; then
  _cmd="docker"
else
  printf -- 'Requires either "podman" or "docker" ("podman" preferred)\n'
  exit 1
fi
readonly _cmd

_prep_mounts() {
  readonly _mount1="${HOME}/.local/etc/containers/${_name}/data"
  readonly _mount2="${HOME}/.local/etc/containers/${_name}/download"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/data"
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/download"

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  _ports="${_ports} -p 127.0.0.1:10200:10200/tcp"

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -eq 0 ]; then
    printf -- 'You must run this as a rootless container\n'
    return 1
  fi

  _userns=""

  readonly _userns

  return 0
}

_containerize() {
  _pp=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="${HOME}/.local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # On Linux, our user session executes from systemd and thus sets the systemd vars
  # like JOURNAL_STREAM and INVOCATION_ID
  #
  # We cannot reliably use them to sniff "am I being ran by systemd"
  #
  # As such our services set a special PYAM_SYSTEMD variable and we sniff that
  if [ "$(uname)" = "Linux" ] && [ -n "${PYAM_SYSTEMD}" ]; then
    if [ "${_cmd}" = "podman" ]; then
      _pp="${_pp} --log-driver json-file"
    fi
  else
    _pp="${_pp} -i -t"
  fi
  readonly _pp

  # Piggyback onto the home-assistant network
  _network="--network container:home-assistant"
  readonly _network

  # Auto Update Checking support
  _auto="--label=io.containers.autoupdate=registry"
  _auto="${_auto} --label=PODMAN_SYSTEMD_UNIT=not-a-real.service"
  readonly _auto

  # Allow model customization via variable or fallback to "Lessac Medium"
  MODEL="${MODEL:-en_US-lessac-medium}"

  # Wake word command
  _pp_cmd="-m wyoming_piper"
  _pp_cmd="${_pp_cmd} --uri tcp://0.0.0.0:10200"
  _pp_cmd="${_pp_cmd} --piper /usr/share/piper/piper"
  _pp_cmd="${_pp_cmd} --length-scale 1"
  _pp_cmd="${_pp_cmd} --noise-scale 0.667"
  _pp_cmd="${_pp_cmd} --speaker 0"
  _pp_cmd="${_pp_cmd} --voice ${MODEL}"
  _pp_cmd="${_pp_cmd} --max-piper-procs 1"
  _pp_cmd="${_pp_cmd} --data-dir /data"
  _pp_cmd="${_pp_cmd} --download-dir /download"

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # Instead of running with privileged, you should pass devices in
  # via runconfig
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --entrypoint python3 \
    ${_pp} \
    ${_network} \
    ${_auto} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" ${_pp_cmd} "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # Launch the containers runtime
  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the root /run/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ] && [ "${_cmd}" = "podman" ]; then
    while [ ! -d "${XDG_RUNTIME_DIR}/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
