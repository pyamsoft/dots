#!/bin/sh

readonly _name="caddy"
readonly _image="ghcr.io/caddybuilds/caddy-cloudflare"
readonly _tag="2.10.2"

# Use podman, don't use docker
if command -v podman >/dev/null; then
  _cmd="podman"
elif command -v docker >/dev/null; then
  _cmd="docker"
else
  printf -- 'Requires either "podman" or "docker" ("podman" preferred)\n'
  exit 1
fi
readonly _cmd

_runas() {
  sudo -u "${_user}" -- "$@" || return 1
  return 0
}

_get_env() {
  _runas env | grep "^${1}=" | tr '=' ' ' | awk '{ print $2 }' || return 1

  unset _env_user
  return 0
}

_priv_port_drop() {
  if [ "$(uname)" != "Darwin" ]; then
    # Open privileged ports for non-root users
    # After a few seconds, close them back up.
    #
    # Since we run this overall script as root, we are "trusted" to open this
    sysctl -q net.ipv4.ip_unprivileged_port_start=80 || return 1
    (sleep 3 && sysctl -q net.ipv4.ip_unprivileged_port_start=1024) &
    return 0
  fi

  return 0
}

_prep_mounts() {
  _root_path="$(_get_env "HOME")/.local"
  readonly _root_path

  readonly _mount1="${_root_path}/etc/containers/${_name}/data"
  readonly _mount2="${_root_path}/etc/containers/${_name}/config"
  readonly _mount3="${_root_path}/etc/containers/${_name}/serve"
  readonly _mount4="${_root_path}/etc/containers/${_name}/logs"

  _runas mkdir -p "${_mount1}" || return 1
  _runas mkdir -p "${_mount2}" || return 1
  _runas mkdir -p "${_mount3}" || return 1
  _runas mkdir -p "${_mount4}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/data"
  _mounts="${_mounts} --mount type=bind,source=${_mount2},target=/config"
  _mounts="${_mounts} --mount type=bind,source=${_mount3},target=/serve"
  _mounts="${_mounts} --mount type=bind,source=${_mount4},target=/var/log/caddy"

  _caddyfile="/etc/caddy"
  if [ -d "${_caddyfile}" ]; then
    _mounts="${_mounts} --mount type=bind,source=${_caddyfile},target=/etc/caddy"
  fi
  unset _caddyfile

  _binary="/opt/caddy/bin/caddy"
  if [ -f "${_binary}" ]; then
    _mounts="${_mounts} --mount type=bind,source=${_binary},target=/usr/bin/caddy"
  fi
  unset _binary

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""
  _caps="${_caps} --cap-add NET_BIND_SERVICE"
  _caps="${_caps} --cap-add NET_ADMIN"

  if [ "$(uname)" = "Darwin" ]; then
    _caps="${_caps} --cap-add DAC_OVERRIDE"
  fi

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  # No ports

  readonly _ports
  return 0
}

_check_user() {
  # On MacOS we use a VM, make sure it is rootful to bind to port 53
  if [ "$(uname)" = "Darwin" ]; then
    if [ "$(id -u)" -eq 0 ]; then
      printf -- 'You must run this as a normal user with a rootful VM\n'
      return 1
    fi
  else
    if [ "$(id -u)" -ne 0 ]; then
      printf -- 'You must run this as a rootful container\n'
      return 1
    fi
  fi

  # Expects to be root (since the cert file is owned by root)
  _userns="--user 0:0"

  readonly _userns
}

_containerize() {
  # Runtime configuration
  _cd=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="$(_get_env "HOME")/.local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf

  # On Linux, our user session executes from systemd and thus sets the systemd vars
  # like JOURNAL_STREAM and INVOCATION_ID
  #
  # We cannot reliably use them to sniff "am I being ran by systemd"
  #
  # As such our services set a special PYAM_SYSTEMD variable and we sniff that
  if [ "$(uname)" = "Linux" ] && [ -n "${PYAM_SYSTEMD}" ]; then
    if [ "${_cmd}" = "podman" ]; then
      _cd="${_cd} --log-driver json-file"
    fi
  else
    _cd="${_cd} -i -t"
  fi
  readonly _cd

  # We use our container DNS resolver
  # MacOS can't launch with host-gateway
  # On Linux we run systemd-resolved on our host machine for DNS caching
  _network="--add-host localhost:127.0.0.1 --dns-search=."
  if [ "$(uname)" = "Linux" ] && [ "${_cmd}" = "podman" ]; then
    _network="${_network} --add-host host.containers.internal:host-gateway"
  fi
  readonly _network

  # Auto Update Checking support
  _auto="--label=io.containers.autoupdate=registry"
  _auto="${_auto} --label=PODMAN_SYSTEMD_UNIT=not-a-real.service"
  readonly _auto

  # Open ports to non-root users
  _priv_port_drop || return 1

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  _runas ${_cmd} run --rm \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    ${_cd} \
    ${_network} \
    ${_auto} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  if [ -z "$1" ]; then
    printf -- 'Must provide target runas user\n'
    return 1
  fi

  # Make sure the target user is provided
  _user="$(id -un "$1")"
  readonly _user

  if [ -z "${_user}" ]; then
    printf -- 'Must provide target runas user\n'
    return 1
  fi

  # Consume the used var
  shift

  # Check that we are not targeting root
  _uid="$(id -u "${_user}")"
  if [ "${_uid}" -eq 0 ]; then
    printf -- 'Your target user must not be root: %s\n' "${_user}"
    return 1
  fi

  # Podman expects us to be in a accessible CWD
  cd / || {
    printf -- 'Unable to cd to root for podman usage\n'
    return 1
  }

  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # Launch the containers runtime
  _runas "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the target user's ${XDG_RUNTIME_DIR}/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ] && [ "${_cmd}" = "podman" ]; then
    while [ ! -d "/run/user/${_uid}/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
