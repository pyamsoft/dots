#!/bin/sh

_PROG="$(basename "$0")"
_CONTAINER=""
_COMPOSE_DIR=""
_COMPOSE_FILE=""

_usage() {
  printf -- '%s\n' "$(cat <<EOF

${_PROG} <name> [-t|--time]

<name>                name of the container to teardown
[-t|--time] <value>   time to wait for container to stop (default 5s)

Teardown will:

For normal scripts:
- Nicely attempt to stop container
  - If fails, forcibly stop container
- Nicely stop associated network if one exists
  - If fails, forcibly stop associated network if one exists

For compose:
- Nicely attempt to down a compose container, and remove orphan services

EOF
)"
}

_teardown_container() {
  _teardown_time="$1"

  # Attempt nice stop
  printf -- 'Attempt nice stop container: %s\n' "${_CONTAINER}"
  podman stop -t "${_teardown_time}" "${_CONTAINER}" >/dev/null || {
    printf -- 'Failed to nicely stop container %s\n' "${_CONTAINER}"
  }

  # Remove the container
  printf -- '\nAttempt force-remove container: %s\n' "${_CONTAINER}"
  podman rm -f "${_CONTAINER}" >/dev/null || {
    printf -- 'Failed to force remove the container %s\n' "${_CONTAINER}"

    # If this fails, we failed
    return 1
  }

  # Remove the network
  printf -- '\nAttempt remove container network: %s\n' "${_CONTAINER}"
  podman network rm -f -t "${_teardown_time}" "${_CONTAINER}" >/dev/null || {
    printf -- 'Failed to remove the container network: %s\n' "${_CONTAINER}"
  }

  printf -- '\nContainer is completely torn down: %s\n' "${_CONTAINER}"

  unset _teardown_time
  return 0
}

_is_compose() {
  if [ "$(id -u)" -eq 0 ]; then
    _COMPOSE_DIR="/usr/local/etc/containers/${_CONTAINER}"
  else
    _COMPOSE_DIR="${HOME}/.local/etc/containers/${_CONTAINER}"
  fi
  _COMPOSE_FILE="${_COMPOSE_DIR}/compose.yml"

  readonly _COMPOSE_DIR
  readonly _COMPOSE_FILE

  # Check that the container location exists
  if [ ! -d "${_COMPOSE_DIR}" ]; then
    return 1
  fi

  # Check that it's compose
  if [ ! -e "${_COMPOSE_FILE}" ]; then
    return 1
  fi

  return 0
}

_teardown_compose() {
  _teardown_time="$1"

  cd "${_COMPOSE_DIR}" || {
    printf -- 'Failed to move into project: %s\n' "${_COMPOSE_DIR}"
    return 1
  }

  printf -- '\nAttempt bring down compose: %s\n' "${_CONTAINER}"
  podman compose --file "${_COMPOSE_FILE}" down --remove-orphans -t "${_teardown_time}" || {
    printf -- 'Failed to bring down compose: %s\n' "${_CONTAINER}"
    return 1
  }

  printf -- '\nCompose is completely torn down: %s\n' "${_CONTAINER}"

  unset _teardown_time
  return 0
}

main() {
  _CONTAINER="$1"
  readonly _CONTAINER

  # Podman expects us to be in a accessible CWD
  cd "${HOME}" || {
    printf -- 'Unable to cd to user HOME for podman usage\n'
    return 1
  }

  if [ -z "${_CONTAINER}" ]; then
    printf -- 'Must provide container name to teardown\n.'
    _usage || return 1
    return 1
  fi

  # Eat name
  shift

  _time=5
  if [ -n "$1" ] && { [ "$1" = "-t" ] || [ "$1" = "--time" ]; }; then
    # We handle time
    shift

    # Did we pass an argument and is it a time
    if [ -n "$1" ] && [ "$1" -eq "$1" ] >/dev/null 2>&1; then
      _time="$1"
    else
      printf -- 'Unexpected "time" argument: "%s". Fallback to default: %s\n' "$1" "${_time}"
    fi
    shift
  fi

  if _is_compose; then
    _teardown_compose "${_time}" || return 1
  else
    _teardown_container "${_time}" || return 1
  fi

  unset _time
  return 0
}

main "$@" || exit 1
exit 0
