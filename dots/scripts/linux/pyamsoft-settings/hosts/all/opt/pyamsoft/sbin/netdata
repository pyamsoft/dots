#!/bin/sh

readonly _name="netdata"
readonly _image="docker.io/netdata/netdata"
readonly _tag="v2.2.6"

# Use podman, don't use docker
readonly _cmd="podman"

_prep_mounts() {
  readonly _mount1="/usr/local/etc/containers/${_name}/config"
  readonly _mount2="/usr/local/etc/containers/${_name}/data"
  readonly _mount3="/usr/local/etc/containers/${_name}/cache"

  mkdir -p "${_mount1}" || return 1
  mkdir -p "${_mount2}" || return 1
  mkdir -p "${_mount3}" || return 1

  _mounts=""
  _mounts="${_mounts} --mount type=bind,source=${_mount1},target=/etc/netdata"
  _mounts="${_mounts} --mount type=bind,source=${_mount2},target=/var/lib/netdata"
  _mounts="${_mounts} --mount type=bind,source=${_mount3},target=/var/cache/netdata"

  # Needs other various paths from the host
  # https://learn.netdata.cloud/docs/netdata-agent/installation/docker

  # Correct timezone
  _mounts="${_mounts} --mount type=bind,source=/etc/localtime,target=/etc/localtime:ro"

  # apps.plugin
  _mounts="${_mounts} --mount type=bind,source=/etc/passwd,target=/etc/passwd:ro"
  _mounts="${_mounts} --mount type=bind,source=/etc/group,target=/etc/group:ro"

  # proc
  _mounts="${_mounts} --mount type=bind,source=/proc,target=/host/proc:ro"

  # cgroups
  _mounts="${_mounts} --mount type=bind,source=/sys,target=/host/sys:ro"

  # OS
  _mounts="${_mounts} --mount type=bind,source=/etc/os-release,target=/etc/os-release:ro"

  # Logs
  _mounts="${_mounts} --mount type=bind,source=/var/log,target=/host/var/log:ro"

  # dbus
  _mounts="${_mounts} --mount type=bind,source=/run/dbus,target=/run/dbus:ro"

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  _caps="${_caps} --cap-add SYS_ADMIN"
  _caps="${_caps} --cap-add SYS_PTRACE"

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  readonly _ports
  return 0
}

_check_user() {
  if [ "$(id -u)" -ne 0 ]; then
    printf -- 'You must run this as a rootfull container\n'
    return 1
  fi

  # Expects to be root
  _userns="--user=0:0"

  readonly _userns

  return 0
}

_containerize() {
  # netdata runtime config variable
  _nd=""

  # Source the runtime config (so we don't have to hardcode keys)
  _runconf="/usr/local/etc/containers/${_name}/runconfig.env"
  if [ ! -e "${_runconf}" ]; then
    printf -- 'You must provide %s\n' "${_runconf}"
    return 1
  fi

  # Source the file into the environment
  # shellcheck disable=SC1090
  . "${_runconf}" || return 1
  unset _runconf
  readonly _nd

  # Auto Update Checking support
  _auto="--label=io.containers.autoupdate=registry"
  _auto="${_auto} --label=PODMAN_SYSTEMD_UNIT=not-a-real.service"

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm -i -t \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    --net=host \
    --pid=host \
    -e DISABLE_TELEMETRY=1 \
    ${_nd} \
    ${_auto} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  # Launch the containers runtime
  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the root /run/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ]; then
    while [ ! -d "/run/containers" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
