#!/bin/sh

_PROG_NAME="$(basename "$0")"
readonly _PROG_NAME

# Use podman, don't use docker
if command -v podman >/dev/null; then
  _cmd="podman"
elif command -v docker >/dev/null; then
  _cmd="docker"
else
  printf -- 'Requires either "podman" or "docker" ("podman" preferred)\n'
  exit 1
fi
readonly _cmd

_dotfiles() {
  exec git --git-dir "${HOME}"/.dotfiles --work-tree "${HOME}" "$@"
}

_usage() {
  printf -- '%s\n' "$(
    cat <<EOF

($(id -un)) ${_PROG_NAME} <action>

<actions>

[container]:   Exectue ${_cmd} operations on containers

  ps           Runs '${_cmd} ps', passing all arguments
  logs         Runs '${_cmd} logs', passing all arguments
  images       Runs '${_cmd} images', passing all arguments
  inspect      Runs '${_cmd} inspect', passing all arguments
  stats        Runs '${_cmd} stats', passing all arguments

[service]:     Service management related operations

  reload       Runs 'systemctl --user daemon-reload'
  disable      Runs 'systemctl --user disable --now container@<name>'
  restart      Runs 'systemctl --user restart container@<name>'
  status       Runs 'systemctl --user status container@<name>'
  stop         Runs 'systemctl --user stop container@<name>'

[system]:      System management related operations

  checkup      Runs 'podman auto-update --dry-run' ("podman" ONLY)
  enter        Runs '${_cmd} exec -it <name> /bin/sh'
  exec         Runs '${_cmd} exec -it <name>'
  prune        Runs '${_cmd} system prune -a'
  pull         Runs 'dotfiles pull'
  teardown     Runs 'container-teardown <name>'

EOF
  )"
}

_prep_container() {
  # Since the containers user lingers, we assume the XDG_RUNTIME_DIR exists, but it's not set in this sudo shell
  # So we manually set it and then call systemctl
  XDG_RUNTIME_DIR="/run/user/$(id -u)"
  export XDG_RUNTIME_DIR

  return 0
}

_collect_containers() {
  _containers_and_args=""

  for _c in "$@"; do
    if [ -z "${_containers_and_args}" ]; then
      case "$1" in
      -*)
        _containers_and_args="$1"
        ;;
      *)
        _containers_and_args="container@$1"
        ;;
      esac
    else
      case "$1" in
      -*)
        # In order
        _containers_and_args="$1 ${_containers_and_args}"
        ;;
      *)
        # In order
        _containers_and_args="container@$1 ${_containers_and_args}"
        ;;
      esac
    fi
    unset _c

    shift
  done
  unset _c

  return 0
}

main() {
  if [ -z "$1" ]; then
    _usage || return 1
    return 1
  fi

  # Podman expects us to be in a accessible CWD
  cd "${HOME}" || {
    printf -- '[%s] Unable to cd to user HOME for %s usage\n' "${_PROG_NAME}" "${_cmd}"
    return 1
  }

  # Eat argument
  _action="$1"
  shift

  case "${_action}" in
  ps | logs | images | inspect | stats)
    exec "${_cmd}" "${_action}" "$@"
    ;;
  checkup)
    if [ "${_cmd}" != "podman" ]; then
      printf -- '[%s] The "checkup" option is only supported with podman\n' "${_PROG_NAME}"
      return 1
    fi

    exec "${_cmd}" auto-update --dry-run "$@"
    ;;
  enter)
    # Use /bin/bash if it is available, otherwise use /bin/sh if times are tough.
    exec "${_cmd}" exec -i -t "$1" /bin/sh -c 'if [ -x /bin/bash ]; then exec /bin/bash; else exec /bin/sh; fi'
    ;;
  exec)
    _container="$1"
    shift

    exec "${_cmd}" exec -i -t "${_container}" "$@"
    ;;
  prune)
    exec "${_cmd}" system prune -a "$@"
    ;;
  pull)
    _dotfiles pull "$@"
    ;;
  disable)
    _prep_container || return 1
    _collect_containers "$@" || return 1

    if [ -z "${_containers_and_args}" ]; then
      printf -- '[%s] Must call %s with at least one container name\n' "${_PROG_NAME}" "${_action}"
      return 1
    fi

    # Run as the user
    # shellcheck disable=SC2086
    exec systemctl --user "${_action}" --now ${_containers_and_args}
    ;;
  restart | status | stop)
    _prep_container || return 1
    _collect_containers "$@" || return 1

    if [ -z "${_containers_and_args}" ]; then
      printf -- '[%s] Must call %s with at least one container name\n' "${_PROG_NAME}" "${_action}"
      return 1
    fi

    # Run as the user
    # shellcheck disable=SC2086
    exec systemctl --user "${_action}" ${_containers_and_args}
    ;;
  reload)
    _prep_container || return 1

    # Run as the user
    # shellcheck disable=SC2086
    exec systemctl --user "daemon-reload"
    ;;
  teardown)
    exec container-teardown "$@"
    ;;
  *)
    printf -- '[%s] Invalid action: "%s"\n' "${_PROG_NAME}" "${_action}"
    _usage || return 1
    return 1
    ;;
  esac

  return 0
}

main "$@" || exit 1
exit 0
