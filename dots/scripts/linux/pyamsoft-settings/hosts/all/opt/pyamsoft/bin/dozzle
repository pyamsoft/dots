#!/bin/sh

readonly _image="docker.io/amir20/dozzle"
readonly _tag="v8.12.0"

# Pick name based on environment mode
case "${DOZZLE_MODE}" in
agent)
  _name="dozzle-agent"
  ;;
hub)
  _name="dozzle-hub"
  ;;
*)
  printf -- 'You must export the Dozzle mode as "DOZZLE_MODE": "agent" "hub"\n'
  exit 1
  ;;
esac

readonly _name

# Use podman, don't use docker
if command -v podman >/dev/null; then
  _cmd="podman"
elif command -v docker >/dev/null; then
  _cmd="docker"
else
  printf -- 'Requires either "podman" or "docker" ("podman" preferred)\n'
  exit 1
fi
readonly _cmd

_prep_mounts() {
  _mounts=""

  if [ "$(id -u)" -eq 0 ]; then
    _podman_socket="/var/run/podman/podman.sock"
  else
    _podman_socket="${XDG_RUNTIME_DIR}/podman/podman.sock"
  fi
  readonly _podman_socket
  readonly _docker_socket="/var/run/docker.sock"

  if [ -S "${_podman_socket}" ]; then
    _mounts="${_mounts} --mount type=bind,source=${_podman_socket},target=/var/run/docker.sock"
  elif [ -S "${_docker_socket}" ]; then
    _mounts="${_mounts} --mount type=bind,source=${_docker_socket},target=/var/run/docker.sock"
  else
    printf -- 'Missing both podman and docker socket.\n'
    return 1
  fi

  readonly _mounts
  return 0
}

_prep_caps() {
  _caps=""

  if [ "${_name}" = "dozzle-agent" ]; then
    # For agent to create a /tmp file
    _caps="${_caps} --cap-add DAC_OVERRIDE"
  fi

  readonly _caps
  return 0
}

_prep_ports() {
  _ports=""

  if [ "${_name}" = "dozzle-hub" ]; then
    _ports="${_ports} -p 127.0.0.1:8910:8080/tcp"
  else
    if [ "$(id -u)" -eq 0 ]; then
      _ports="${_ports} -p 127.0.0.1:51234:7007/tcp"
    else
      _ports="${_ports} -p 127.0.0.1:4$(id -u):7007/tcp"
    fi
  fi

  readonly _ports
  return 0
}

_check_user() {
  # This can be run by either root or a normal user
  _userns=""
  readonly _userns

  return 0
}

_containerize() {
  _dz=""

  # Source the runtime config (so we don't have to hardcode keys)
  if [ "$(id -u)" -eq 0 ]; then
    _runconf="/usr/local/etc/containers/${_name}/runconfig.env"
  else
    _runconf="${HOME}/.local/etc/containers/${_name}/runconfig.env"
  fi

  # Ensure config directory for the hub to set up remote ports
  mkdir -p "$(dirname "${_runconf}")" || return 1

  if [ "${_name}" = "dozzle-hub" ]; then
    if [ ! -e "${_runconf}" ]; then
      printf -- 'You must provide %s\n' "${_runconf}"
      return 1
    fi
  else
    if [ ! -e "${_runconf}" ]; then
      printf -- 'Optional runconfig support at %s\n' "${_runconf}"
    fi
  fi

  if [ -e "${_runconf}" ]; then
    # Source the file into the environment
    # shellcheck disable=SC1090
    . "${_runconf}" || return 1
    unset _runconf
  fi

  if [ "${_name}" = "dozzle-agent" ]; then
    # Set the name for the agent
    DOZZLE_HOSTNAME="$(id -un)"
    # Remove the "containers" prefix if we are a delegated user
    if [ "${DOZZLE_HOSTNAME}" != "containers" ]; then
      DOZZLE_HOSTNAME="${DOZZLE_HOSTNAME#containers-}"
    fi

    _hostname=""
    if command -v hostnamectl >/dev/null; then
      _hostname="$(hostnamectl hostname)"
    elif command -v hostname >/dev/null; then
      _hostname="$(hostname)"
    elif [ -r /etc/hostname ]; then
      _hostname="$(cat /etc/hostname)"
    fi

    if [ -n "${_hostname}" ]; then
      _dz="${_dz} -e DOZZLE_HOSTNAME=${_hostname}:${DOZZLE_HOSTNAME}"
    else
      _dz="${_dz} -e DOZZLE_HOSTNAME=${DOZZLE_HOSTNAME}"
    fi
    unset DOZZLE_HOSTNAME

    # Add the agent command
    set -- "agent" "$@"
  fi

  # Executing from systemd, one or both of these are set, otherwise, we are CLI
  # INVOCATION_ID is set for shells using run0, so we don't want to track on that
  # Just expect JOURNAL_STREAM for services connected to journald
  if [ "$(uname)" = "Linux" ] && [ -n "${JOURNAL_STREAM}" ]; then
    if [ "${_cmd}" = "podman" ]; then
      _dz="${_dz} --log-driver json-file"
    fi
  else
    _dz="${_dz} -i -t"
  fi
  readonly _dz

  # We use our container DNS resolver
  # MacOS can't launch with host-gateway
  # On Linux we run systemd-resolved on our host machine for DNS caching
  _network="--add-host localhost:127.0.0.1 --dns-search=."
  if [ "$(uname)" = "Linux" ] && [ "${_cmd}" = "podman" ]; then
    # Only compare the version minors
    _current_version="$("${_cmd}" --version | awk '{ print $3 }' | tr '.' ' ' | awk '{ print $1 "." $2}')"
    _is_cmd_new_enough="$(printf -- '%s' "${_current_version}" | awk '{ if ($1 >= 4.7) print 1; else print 0 }')"
    unset _current_version

    if [ 1 -eq "${_is_cmd_new_enough}" ]; then
      _network="${_network} --add-host host.containers.internal:host-gateway"
    fi

    unset _is_cmd_new_enough
  fi

  # Auto Update Checking support
  _auto="--label=io.containers.autoupdate=registry"
  _auto="${_auto} --label=PODMAN_SYSTEMD_UNIT=not-a-real.service"
  readonly _auto

  # Log the commands we use next
  # Fail on errors
  # Fail on unassigned
  set -xeu

  # Don't quote so that if user is empty it still expands
  #
  # shellcheck disable=SC2086
  exec ${_cmd} run --rm \
    --name "${_name}" --hostname "${_name}" \
    --security-opt no-new-privileges:true --cap-drop ALL \
    -e DOZZLE_NO_ANALYTICS=1 \
    ${_dz} \
    ${_network} \
    ${_auto} \
    ${_mounts} \
    ${_ports} \
    ${_caps} \
    ${_userns} \
    "${_image}:${_tag}" "$@"
}

main() {
  _check_user || return 1
  _prep_mounts || return 1
  _prep_ports || return 1
  _prep_caps || return 1

  "${_cmd}" --version >/dev/null 2>&1 || {
    printf -- 'Unable to check %s version.\n' "${_cmd}"
    return 1
  }

  # Wait for the ${XDG_RUNTIME_DIR}/podman folder to be available before launching
  # This folder is created "at some point" in response to podman commands being run
  if [ "$(uname)" = "Linux" ] && [ "${_cmd}" = "podman" ]; then
    if [ "$(id -u)" -eq 0 ]; then
      _livepath="/var/run/containers"
    else
      _livepath="${XDG_RUNTIME_DIR}/containers"
    fi
    while [ ! -d "${_livepath}" ]; do
      sleep 1 || {
        printf -- 'Cancelled while waiting for container runtime to stand up.\n'
        return 1
      }
    done
    unset _livepath
    printf -- 'Container runtime is ready, start %s\n' "${_name}"
  fi

  _containerize "$@" || return 1
  return 0
}

main "$@" || exit 1
exit 0
