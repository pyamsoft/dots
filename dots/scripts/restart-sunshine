#!/bin/sh

_stale_unlink() {
  rm -f "$1" || {
    printf -- '[ERROR] Failed removing dangling file: %s\n' "$1"
    return 1
  }

  return 0
}

_remove_holdovers() {
  printf -- 'We remove old device symlinks and logs.\n'
  printf -- 'Sunshine sometimes has a problem cleaning these up and refuses to start...\n\n'

  # Bad symlinks
  _stale_unlink "${HOME}/.config/sunshine/sunshine_keyboard" || return 1
  _stale_unlink "${HOME}/.config/sunshine/sunshine_mouse" || return 1
  _stale_unlink "${HOME}/.config/sunshine/sunshine_touchscreen" || return 1

  # Logs
  _stale_unlink "${HOME}/.config/sunshine/sunshine.log" || return 1

  return 0
}

_unlock_linux() {
  _s="$1"

  loginctl unlock-session "${_s}" || {
    printf -- '[ERROR] Failed unlocking session: %s\n' "${_s}"
    return 1
  }

  unset _s
  return 0
}

_unlock_macos() {
  _s="$1"

  # How do we unlock MacOS? Do we need to?
  printf -- ' '

  unset _s
  return 0
}

_unlock_session() {
  _session_to_unlock="$1"

  if [ "$(uname)" = "Darwin" ]; then
    _unlock_macos "${_session_to_unlock}" || return 1
  else
    _unlock_linux "${_session_to_unlock}" || return 1
  fi

  unset _session_to_unlock
  return 0
}

_list_sessions_linux() {
  # Get only the session ID and the user name
  # Only sessions for our active user
  # Match with spaces just in case a name is a part of another name
  loginctl list-sessions --no-legend | awk '{ print $1 " " $2 " " $3 }' | grep " $(id -u) $(id -un)" | awk '{ print $1 }' || return 1

  return 0
}

_list_sessions_macos() {
  # How do we list sessions on MacOS? Do we need to?
  printf -- ' ' || return 1
  return 0
}

_unlock_sessions() {
  printf -- 'We unlock all user-sessions\n'
  printf -- 'Sunshine will not be able to claim the CPU and GPU for rendering otherwise.\n\n'

  if [ "$(uname)" = "Darwin" ]; then
    _user_sessions="$(_list_sessions_macos)"
  else
    _user_sessions="$(_list_sessions_linux)"
  fi

  for _session_num in ${_user_sessions}; do
    _unlock_session "${_session_num}" || return 1
    unset _session_num
  done

  unset _user_sessions
  return 0
}

_stop_sunshine_linux() {
  systemctl --user stop sunshine >/dev/null 2>&1 || return 1
  return 0
}

_start_sunshine_linux() {
  systemctl --user restart sunshine >/dev/null 2>&1 || return 1
  return 0
}

_stop_sunshine_macos() {

  # shellcheck disable=SC2009
  _d_pid="$(ps aux | grep 'daemondo --label=Sunshine' | grep -v grep | awk '{ print $2 }')"
  if [ -n "${_d_pid}" ]; then

    # Send kill
    printf -- 'Attempt to kill running daemondo --label=Sunshine process...\n'
    kill "${_d_pid}" || {
      printf -- 'Failed to kill daemondo PID: %s\n' "${_d_pid}"
      return 1
    }

    # Wait for death
    _wait_count=0
    while [ -n "${_d_pid}" ]; do
      _wait_count="$((_wait_count + 1))"

      # Force kill if we take too long
      if [ "${_wait_count}" -ge 10 ]; then
        printf -- "We've waited a long time to stop the old. Force kill it"
        kill -9 "${_d_pid}" || {
          printf -- 'Failed to force-kill daemondo PID: %s\n' "${_d_pid}"

          unset _wait_count
          unset _d_pid
          return 1
        }
      fi

      # Wait for death
      sleep 2

      # shellcheck disable=SC2009
      _d_pid="$(ps aux | grep 'daemondo --label=Sunshine' | grep -v grep | awk '{ print $2 }')"
    done
  fi

  printf -- 'Stopped old Sunshine daemondo!\n'

  unset _wait_count
  unset _d_pid
  return 0
}

_start_sunshine_macos() {
  # Restart
  _stop_sunshine_macos

  # Run sunshine daemon
  printf -- 'Run sunshine with daemondo!\n'
  /opt/local/bin/daemondo --label=Sunshine --restart-netchange --pid=exec --start-cmd /opt/local/bin/sunshine > "${XDG_CONFIG_HOME:-${HOME}/.config}/MacOS/logs/sunshine" &

  return 0
}

_stop_sunshine() {
  if [ "$(uname)" = "Darwin" ]; then
    _stop_sunshine_macos || return 1
  else
    _stop_sunshine_linux || return 1
  fi

  return 0
}

_start_sunshine() {
  if [ "$(uname)" = "Darwin" ]; then
    _start_sunshine_macos || return 1
  else
    _start_sunshine_linux || return 1
  fi

  return 0
}

_restart() {
  printf -- 'Stopping old sunshine service...\n\n'

  _stop_sunshine || return 1

  # Kill any potentially bad symlinks
  _remove_holdovers || return 1

  # Unlock all sessions (if a session is locked, it causes sunshine to be unable to claim the display and GPU/CPU)
  _unlock_sessions || return 1

  printf -- 'Starting new sunshine service...\n\n'

  _start_sunshine || return 1

  return 0
}

_restart_sunshine() {
  printf -- 'Restarting Sunshine gamestream...\n'
  if _restart; then
    printf -- 'Restarted sunshine service!\n'
  else
    printf -- '[ERROR] Failed to restart sunshine\n'
    return 1
  fi

  return 0
}

main() {
  if command -v sunshine >/dev/null 2>&1; then
    _restart_sunshine || return 1
    return 0
  else

    # On MacOS sometimes we are not on the PATH
    if [ "$(uname)" = "Darwin" ]; then
      if [ -e /opt/local/bin/sunshine ]; then
        _restart_sunshine || return 1
        return 0
      fi
    fi

    printf -- 'sunshine is not installed.\n'
    exit 1
  fi
}

main "$@" || exit 1
exit 0
