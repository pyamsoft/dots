#!/bin/sh

# Opens up the value of non-root port bindings temporarily

target_user="$1"
if [ -z "${target_user}" ]; then
  target_user="${SUDO_USER}"
else
  # We found a target user, eat it
  shift
fi
readonly target_user

# You must run as sudo, which sets this env_var
if [ -z "${target_user}" ]; then
  printf -- '[portbind] You must run this script with "sudo" or provide a target user\n'
  exit 1
fi

# Your original user cannot be root
if [ "$(id -u "${target_user}")" -eq 0 ]; then
  printf -- '[portbind] Do not run this script with your target user as root.\n'
  exit 1
fi

# Your acting user must be root
if [ "$(id -u)" -ne 0 ]; then
  printf -- '[portbind] You must have root privilege to run this script.\n'
  exit 1
fi

# We use our elevated sudo privilege to drop the port binding down to the req number
readonly open_port="$1"
readonly og_port=1024
readonly wait_time=2

# Eat argument
shift

if [ "$#" -le 0 ]; then
  printf -- '[portbind] You must specify a command to run\n'
  exit 1
fi

# Drop ports
if [ -z "${open_port}" ] || [ "${open_port}" -ge 1024 ]; then
  printf -- '[portbind] Must specify a port <1024: %s\n' "${open_port}"
  exit 1
fi

# First drop the port
printf -- '[portbind] Drop privileged ports as root down: %s\n' "${open_port}"
sysctl -w -q net.ipv4.ip_unprivileged_port_start="${open_port}"

# Then in the background, we wait 5 seconds and then close the port again
(
  sleep "${wait_time}" && {
    printf -- '[portbind] Restore original privileged ports root: %s\n' "${og_port}"
    sysctl -w -q net.ipv4.ip_unprivileged_port_start="${og_port}"
  }
) &

# In the meantime, you should execute your program that needs the open port
# as normal user instead of root
printf -- '[portbind] Execute command as normal user: %s => %s\n' "${target_user}" "$*"
exec sudo --login --user="${target_user}" "$@"
