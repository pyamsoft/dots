#!/bin/sh

# Variables
__gamescope_options=""
__game_environment=""
__game_tools=""
__env_tools=""

_export_gaming_environment()
{
  # Fix weird texture bugs
  # https://github.com/Plagman/gamescope/issues/320
  export AMD_DEBUG=nodcc
  export RADV_DEBUG=nodcc

  # Use single-file shader cache
  # https://www.phoronix.com/news/Mesa-Single-File-Cache
  export MESA_DISK_CACHE_SINGLE_FILE=1

  return 0
}

_get_hostname()
{
  if command -v hostnamectl > /dev/null; then
    __hostname="$(hostnamectl hostname)"
  elif command -v hostname > /dev/null; then
    __hostname="$(hostname)"
  fi

  return 0
}

##
# For gamescope, the following is needed
# --devices=all;shm; is needed for Steam overlay and Steam input
# --env SDL_VIDEODRIVER=x11 must be set on the flatpak itself, not just in this file.
# You must use Proton-GE from within a flatpak, since Steam pressure-vessel messes up gamescope
# You must use Super+U to enable FSR in game
_prepare_gamescope()
{
  if command -v gamescope > /dev/null; then
    # gamescope
    # https://github.com/Plagman/gamescope
    #
    # Run games in Fullscreen at the nested resolution (which should be shown as the only FS res)
    # FSR is between 0 (max) and 20 (min) instead of 0-5. Default is 2 => 8
    #
    # NOTE: Shouldn't crash if the environment sets SDL_VIDEODRIVER=x11
    #
    # NOTE: If we only provide a height, gamescope will assume the width as 16x9
    #
    # NOTE: ReadyOrNot has a minimum of 1368x768, change the config file and do not touch settings to have it be lower
    #       If you open the settings in game, your FPS will go to 2.
    #       Run it with GAME_FSR=1
    #
    # NOTE: Slay the Spire won't launch in Fullscreen if the resolution is below 1280x720, use Windowed mode
    #       Or run it with GAME_FSR=1
    #
    # NOTE: FSR performance is 2.0x nested resolution.
    # NOTE: FSR balanced is 1.7x nested resolution.
    # NOTE: FSR quality is 1.5x nested resolution.
    #
    # NOTE: Do not apply any FSR sharpness with gamescope, we will use vkBasalt for that
    # NOTE: Shell math doesn't like decimals, so divide stuff by 10 instead

    # Defaults to 1080p
    window_type="--borderless"
    output_height=1080
    output_width=
    nested_height=720
    nested_width=

    if [ "${__hostname}" = "nerd1" ]; then
      printf -- '[gametime] Using nerd1 gamescope defaults\n'
      window_type="--borderless"
      output_height=900
      output_width=
      nested_height=600
      nested_width=
    elif [ "${__hostname}" = "nerd2" ]; then
      printf -- '[gametime] Using nerd2 gamescope defaults\n'
      window_type="--fullscreen"
      output_height=1080
      output_width=
      nested_height=720
      nested_width=
    else
      printf -- '[gametime] Hostname "%s" unknown, use 1080p defaults\n' "${__hostname}"
    fi

    if [ -n "${GAME_RES}" ]; then
      output_width="$(printf -- '%s' "${GAME_RES}" | tr 'x' ' ' | awk '{ print $1 }')"
      output_height="$(printf -- '%s' "${GAME_RES}" | tr 'x' ' ' | awk '{ print $2 }')"
      unset GAME_RES
    fi

    # If a game supports FSR natively, pass `GAME_FSR=1` to the environment when running
    # gametime so that gamescope will not apply its rougher implementation of FSR1.
    if [ -n "${GAME_FSR}" ] && [ "${GAME_FSR}" -ne 0 ]; then
      unset GAME_FSR

      # Game has its own FSR, or does not want FSR
      nested_height="${output_height}"
      if [ -n "${output_width}" ]; then
        nested_width="${output_width}"
      fi
    fi

    # Options passed to gamescope session
    # 0 is max sharpness, 20 is min sharpness
    __gamescope_options="${__gamescope_options} ${window_type}"
    __gamescope_options="${__gamescope_options} --output-height ${output_height}"
    __gamescope_options="${__gamescope_options} --nested-height ${nested_height}"
    __gamescope_options="${__gamescope_options} --fsr-upscaling --fsr-sharpness 20"

    if [ -n "${output_width}" ]; then
      __gamescope_options="${__gamescope_options} --output-width ${output_width}"
    fi
    if [ -n "${nested_width}" ]; then
      __gamescope_options="${__gamescope_options} --nested-width ${nested_width}"
    fi


  fi

  unset output_width
  unset output_height

  unset nested_width
  unset nested_height

  unset window_type

  return 0
}

_enable_vkbasalt()
{
  # vkBasalt
  # https://github.com/DadSchoorse/vkBasalt
  #
  # Use with vkBasalt.conf to enable better CAS in games (gamescope has sharpening but it kinda sux)
  if [ -d "/usr/lib/extensions/vulkan/vkBasalt" ]; then
    __game_environment="${__game_environment} ENABLE_VKBASALT=1"
  fi

  return 0
}

_enable_obs()
{
  # OBS VKCapture
  # https://github.com/nowrep/obs-vkcapture
  #
  # Depending on steam vs others, we set te OBS_VKCAPTURE at a different scope
  if command -v obs-gamecapture > /dev/null; then
    __env_tools="${__env_tools} obs-gamecapture"
  fi

  return 0
}

_enable_gamemode()
{
  # Game mode
  # https://github.com/nowrep/obs-vkcapture
  #
  # Run using gamemode for slightly more performance
  if command -v gamemoderun > /dev/null; then
    __env_tools="${__env_tools} gamemoderun"
  fi

  return 0
}

_enable_mangohud()
{
  # Mangohud
  # https://github.com/flightlessmango/MangoHud#hud-configuration
  #
  # We cannot export MANGOHUD=1 before gamescope as it will crash or not report correctly.
  # We must use gamescope to run mangohud, and then use mangohud to run our command.
  if command -v mangohud > /dev/null; then
    __game_tools="${__game_tools} mangohud --dlsym"

    export MANGOHUD_CONFIG="fps,cpu_temp,gpu_temp,ram,vram,swap,cpu_mhz,core_load,gpu_core_clock,gpu_mem_clock,resolution,show_fps_limit,vkbasalt,gamemode,font_size=18,no_display"
  fi

  return 0
}

_enable_flatpak_options()
{
  # If we are running in steam, add --steam option, otherwise do not (causes weird window issues)
  if [ "${FLATPAK_ID}" = "com.valvesoftware.Steam" ]; then
    if command -v gamescope > /dev/null; then
      __gamescope_options="${__gamescope_options} --steam"
    fi
  fi

  return 0
}

_execute()
{
  unset __hostname

  if command -v gamescope > /dev/null; then
    printf -- '[gametime] env %s gamescope %s -- env %s %s %s' \
      "${__env_tools}" "${__gamescope_options}" "${__game_environment}" "${__game_tools}" "$*"
    # shellcheck disable=SC2086
    exec env ${__env_tools} gamescope ${__gamescope_options} -- env ${__game_environment} ${__game_tools} "$@"
  else
    printf -- '[gametime] env %s %s %s %s' \
      "${__env_tools}" "${__game_environment}" "${__game_tools}" "$*"
    # shellcheck disable=SC2086
    exec env ${__env_tools} ${__game_environment} ${__game_tools} "$@"
  fi

  return 0
}

main()
{
  if [ -z "${FLATPAK_ID}" ]; then
    printf -- "[gametime] Must run inside flatpak.\n"
    return
  fi

  _export_gaming_environment || {
    printf -- '[gametime] Unable to export gaming environment\n'
    return 1
  }

  _get_hostname || {
    printf -- '[gametime] Unable to resolve hostname\n'
    __hostname=""
  }

  _prepare_gamescope || {
    printf -- '[gametime] Unable to prepare gamescope\n'
    return 1
  }

  _enable_gamemode || {
    printf -- '[gametime] Unable to enable gamemode\n'
    return 1
  }

  _enable_obs || {
    printf -- '[gametime] Unable to enable OBS\n'
    return 1
  }

  _enable_vkbasalt || {
    printf -- '[gametime] Unable to enable vkBasalt\n'
    return 1
  }

  _enable_mangohud || {
    printf -- '[gametime] Unable to enable mangohud\n'
    return 1
  }

  _enable_flatpak_options || {
    printf -- '[gametime] Unable to enable specific flatpak options: "%s"\n' "${FLATPAK_ID}"
    return 1
  }

  _execute "$@" || {
    printf -- '[gametime] Failed execute: "%s"\n' "${FLATPAK_ID}"
    return 1
  }
}

main "$@" || exit 1
exit 0
