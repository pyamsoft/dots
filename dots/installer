#!/bin/sh

# More reading
# https://www.atlassian.com/git/tutorials/dotfiles
# https://stackoverflow.com/questions/10637378/how-do-i-convert-a-bare-git-repository-into-a-normal-one-in-place

# The dotfiles alias
alias dotfiles='git --git-dir "${HOME}"/.dotfiles --work-tree "${HOME}"'

_dot_config() {
  dotfiles config --local "$@" || {
    printf -- 'Failed dotfiles config: %s\n' "$*"
    return 1
  }

  return 0
}

_git_config() {
  _dot_config "core.excludesfile" "${HOME}/.gitignore" || return 1
  _dot_config --int "core.compression" 4 || return 1

  _dot_config --bool "commit.verbose" true || return 1

  _dot_config "init.defaultBranch" "main" || return 1

  _dot_config "diff.algorithm" "histogram" || return 1
  _dot_config "diff.colorMoved" "plain" || return 1
  _dot_config --bool "diff.mnemonicPrefix" true || return 1
  _dot_config --bool "diff.renames" true || return 1

  _dot_config --bool "push.autoSetupRemote" true || return 1
  _dot_config --bool "push.followTags" true || return 1

  _dot_config --bool "fetch.prune" true || return 1
  _dot_config --bool "fetch.all" true || return 1

  _dot_config "help.autocorrect" "prompt" || return 1

  _dot_config --bool "rerere.enabled" true || return 1
  _dot_config --bool "rerere.autoupdate" true || return 1

  _dot_config --bool "rebase.autoSquash" true || return 1
  _dot_config --bool "rebase.autoStash" true || return 1
  _dot_config --bool "rebase.updateRefs" true || return 1

  _dot_config --bool "pull.rebase" true || return 1

  return 0
}

main() {
  # Clone the repo as bare into the dotfiles folder
  # This will only pull in repo information but not any files yet
  git clone --bare "https://github.com/pyamsoft/dots.git" "${HOME}"/.dotfiles || {
    printf -- 'Failed to clone dotfile remote repository\n'
    return 1
  }

  # Configure the repository to only show explicitly added files
  dotfiles config --local status.showUntrackedFiles no || {
    printf -- 'Failed to configure local dotfiles repository\n'
    return 1
  }

  printf -- '\n\n\n====================================\n'
  printf -- '\nEdit and correct any existing files.\n'
  printf -- 'When you are ready, press Enter: '
  read -r _ >/dev/null 2>&1
  printf -- '====================================\n'

  # Mark our repo as not bare
  dotfiles config --local --bool core.bare false || {
    printf -- 'Failed updating local repository from bare => normal\n'
    return 1
  }

  _git_config || {
    printf -- 'Failed to configure local dotfiles repository\n'
    return 1
  }

  # Reset back onto main
  dotfiles reset --hard || {
    printf -- 'Failed hard reset back to main\n'
    return 1
  }

  # Mark the upstream fetch lines so "dotfiles fetch" sees origin/main
  dotfiles config --local 'remote.origin.fetch' '+refs/heads/*:refs/remotes/origin/*' || {
    printf -- 'Failed configuring local upstream origin remotes.\n'
    return 1
  }

  # Sync up
  dotfiles fetch -a -p || {
    printf -- 'Failed sync-up pruning fetch\n'
    return 1
  }

  printf -- 'Setting origin upstream to "main"\n'
  dotfiles branch --set-upstream-to=origin/main main || {
    printf -- 'Failed setting origin upstream to "main"\n'
    return 1
  }

  printf -- 'Dotfiles repository installed. Launch a new shell using: %s\n' "${SHELL:-/bin/bash}"
  return 0
}

main "$@" || exit 1
exit 0
